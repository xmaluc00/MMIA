
cv08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c28  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e2c  08002e2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e34  08002e34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  08002e4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002e4c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a706  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c6  00000000  00000000  0002a746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002c928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232bf  00000000  00000000  0002d388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ac0  00000000  00000000  00050647  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8b67  00000000  00000000  00058107  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  00130cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002dbc 	.word	0x08002dbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002dbc 	.word	0x08002dbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_TIM_PeriodElapsedCallback>:
	ITM_SendChar(ch);
	return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};

	if (key == -1) {
 80004f4:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004fe:	d142      	bne.n	8000586 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000500:	2108      	movs	r1, #8
 8000502:	4849      	ldr	r0, [pc, #292]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000504:	f000 ffa6 	bl	8001454 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d108      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x34>
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a47      	ldr	r2, [pc, #284]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	4413      	add	r3, r2
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	b25a      	sxtb	r2, r3
 800051c:	4b41      	ldr	r3, [pc, #260]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800051e:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000520:	2140      	movs	r1, #64	; 0x40
 8000522:	4841      	ldr	r0, [pc, #260]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000524:	f000 ff96 	bl	8001454 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d109      	bne.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x56>
 800052e:	4b3f      	ldr	r3, [pc, #252]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a3f      	ldr	r2, [pc, #252]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	3304      	adds	r3, #4
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	b25a      	sxtb	r2, r3
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000540:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000542:	2120      	movs	r1, #32
 8000544:	4838      	ldr	r0, [pc, #224]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000546:	f000 ff85 	bl	8001454 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000550:	4b36      	ldr	r3, [pc, #216]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a36      	ldr	r2, [pc, #216]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	4413      	add	r3, r2
 800055a:	3308      	adds	r3, #8
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	b25a      	sxtb	r2, r3
 8000560:	4b30      	ldr	r3, [pc, #192]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000562:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000564:	2110      	movs	r1, #16
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000568:	f000 ff74 	bl	8001454 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	4413      	add	r3, r2
 800057c:	330c      	adds	r3, #12
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b25a      	sxtb	r2, r3
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000584:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2102      	movs	r1, #2
 800058a:	482a      	ldr	r0, [pc, #168]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800058c:	f000 ff7a 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4828      	ldr	r0, [pc, #160]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000598:	f000 ff74 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4825      	ldr	r0, [pc, #148]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80005a2:	f000 ff6f 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80005ae:	f000 ff69 	bl	8001484 <HAL_GPIO_WritePin>

	switch (row) {
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d830      	bhi.n	800061c <HAL_TIM_PeriodElapsedCallback+0x130>
 80005ba:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	080005f7 	.word	0x080005f7
 80005cc:	0800060b 	.word	0x0800060b
	case 0:
		row = 1;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80005de:	f000 ff51 	bl	8001484 <HAL_GPIO_WritePin>
		break;
 80005e2:	e01b      	b.n	800061c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1:
		row = 2;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80005f0:	f000 ff48 	bl	8001484 <HAL_GPIO_WritePin>
		break;
 80005f4:	e012      	b.n	800061c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2:
		row = 3;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000604:	f000 ff3e 	bl	8001484 <HAL_GPIO_WritePin>
		break;
 8000608:	e008      	b.n	800061c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3:
		row = 0;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2102      	movs	r1, #2
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000616:	f000 ff35 	bl	8001484 <HAL_GPIO_WritePin>
		break;
 800061a:	bf00      	nop
	}
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	40021000 	.word	0x40021000
 800062c:	2000004c 	.word	0x2000004c
 8000630:	08002dd4 	.word	0x08002dd4
 8000634:	40021800 	.word	0x40021800
 8000638:	40021400 	.word	0x40021400

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fbd9 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f87d 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f95d 	bl	8000908 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800064e:	f000 f931 	bl	80008b4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000652:	f000 f8e1 	bl	8000818 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <main+0xe8>)
 8000658:	f001 fbd5 	bl	8001e06 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (key != -1){
 800065c:	4b32      	ldr	r3, [pc, #200]	; (8000728 <main+0xec>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d0f9      	beq.n	800065c <main+0x20>

		  new_time = HAL_GetTick();
 8000668:	f000 fc2c 	bl	8000ec4 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <main+0xf0>)
 8000670:	601a      	str	r2, [r3, #0]

		  uint8_t n = memcmp(pole, kod, sizeof(kod));
 8000672:	2307      	movs	r3, #7
 8000674:	2204      	movs	r2, #4
 8000676:	4619      	mov	r1, r3
 8000678:	482d      	ldr	r0, [pc, #180]	; (8000730 <main+0xf4>)
 800067a:	f002 fb87 	bl	8002d8c <memcmp>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]

		  if (index == 5 && n == 0){HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);}
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <main+0xf8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b05      	cmp	r3, #5
 800068a:	d107      	bne.n	800069c <main+0x60>
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d104      	bne.n	800069c <main+0x60>
 8000692:	2101      	movs	r1, #1
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <main+0xfc>)
 8000696:	f000 ff0e 	bl	80014b6 <HAL_GPIO_TogglePin>
 800069a:	e00a      	b.n	80006b2 <main+0x76>
		  else if (index == 5 && n != 0){index = 0;}
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0xf8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	d105      	bne.n	80006b2 <main+0x76>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <main+0x76>
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <main+0xf8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

		  if (new_time < old_time + prodleva){
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <main+0x100>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <main+0x104>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	441a      	add	r2, r3
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <main+0xf0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d911      	bls.n	80006ec <main+0xb0>

			  pole[index] = key;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <main+0xec>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b259      	sxtb	r1, r3
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <main+0xf8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0xf4>)
 80006d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  index++;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <main+0xf8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	3301      	adds	r3, #1
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <main+0xf8>)
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e013      	b.n	8000714 <main+0xd8>

		  }

		  else {

			  index = 0;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <main+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
			  pole[index] = key;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <main+0xec>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b259      	sxtb	r1, r3
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <main+0xf8>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <main+0xf4>)
 8000702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  index++;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <main+0xf8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	3301      	adds	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <main+0xf8>)
 8000712:	701a      	strb	r2, [r3, #0]

		  }

		  old_time = new_time;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <main+0xf0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <main+0x104>)
 800071a:	6013      	str	r3, [r2, #0]
		  key = -1;
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <main+0xec>)
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	701a      	strb	r2, [r3, #0]
	  if (key != -1){
 8000722:	e79b      	b.n	800065c <main+0x20>
 8000724:	20000090 	.word	0x20000090
 8000728:	20000000 	.word	0x20000000
 800072c:	20000030 	.word	0x20000030
 8000730:	20000038 	.word	0x20000038
 8000734:	20000034 	.word	0x20000034
 8000738:	40020400 	.word	0x40020400
 800073c:	20000002 	.word	0x20000002
 8000740:	2000002c 	.word	0x2000002c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb29 	bl	8002daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b8:	23a8      	movs	r3, #168	; 0xa8
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c0:	2307      	movs	r3, #7
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fe8f 	bl	80014ec <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d4:	f000 f9f8 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2105      	movs	r1, #5
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f8e8 	bl	80019cc <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000802:	f000 f9e1 	bl	8000bc8 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM3_Init+0x94>)
 8000836:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <MX_TIM3_Init+0x98>)
 8000838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM3_Init+0x94>)
 800083c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM3_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_TIM3_Init+0x94>)
 800084a:	2263      	movs	r2, #99	; 0x63
 800084c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_TIM3_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_TIM3_Init+0x94>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_TIM3_Init+0x94>)
 800085c:	f001 faa8 	bl	8001db0 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f9af 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM3_Init+0x94>)
 8000878:	f001 fbf1 	bl	800205e <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f9a1 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM3_Init+0x94>)
 8000894:	f001 fdfc 	bl	8002490 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800089e:	f000 f993 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000090 	.word	0x20000090
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART3_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ec:	f001 fe60 	bl	80025b0 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f967 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000050 	.word	0x20000050
 8000904:	40004800 	.word	0x40004800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
 8000922:	4ba1      	ldr	r3, [pc, #644]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4aa0      	ldr	r2, [pc, #640]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b9e      	ldr	r3, [pc, #632]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	623b      	str	r3, [r7, #32]
 8000938:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	4b9a      	ldr	r3, [pc, #616]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a99      	ldr	r2, [pc, #612]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b97      	ldr	r3, [pc, #604]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b93      	ldr	r3, [pc, #588]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a92      	ldr	r2, [pc, #584]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b90      	ldr	r3, [pc, #576]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a8b      	ldr	r2, [pc, #556]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b89      	ldr	r3, [pc, #548]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b85      	ldr	r3, [pc, #532]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a84      	ldr	r2, [pc, #528]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b82      	ldr	r3, [pc, #520]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b7e      	ldr	r3, [pc, #504]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a7d      	ldr	r2, [pc, #500]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b7b      	ldr	r3, [pc, #492]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b77      	ldr	r3, [pc, #476]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a76      	ldr	r2, [pc, #472]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b74      	ldr	r3, [pc, #464]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b70      	ldr	r3, [pc, #448]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a6f      	ldr	r2, [pc, #444]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b6d      	ldr	r3, [pc, #436]	; (8000ba8 <MX_GPIO_Init+0x2a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000a04:	4869      	ldr	r0, [pc, #420]	; (8000bac <MX_GPIO_Init+0x2a4>)
 8000a06:	f000 fd3d 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a10:	4867      	ldr	r0, [pc, #412]	; (8000bb0 <MX_GPIO_Init+0x2a8>)
 8000a12:	f000 fd37 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2142      	movs	r1, #66	; 0x42
 8000a1a:	4866      	ldr	r0, [pc, #408]	; (8000bb4 <MX_GPIO_Init+0x2ac>)
 8000a1c:	f000 fd32 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000a20:	2378      	movs	r3, #120	; 0x78
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4861      	ldr	r0, [pc, #388]	; (8000bb8 <MX_GPIO_Init+0x2b0>)
 8000a34:	f000 fb64 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3e:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <MX_GPIO_Init+0x2b4>)
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	485c      	ldr	r0, [pc, #368]	; (8000bc0 <MX_GPIO_Init+0x2b8>)
 8000a4e:	f000 fb57 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000a52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a58:	2311      	movs	r3, #17
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4850      	ldr	r0, [pc, #320]	; (8000bac <MX_GPIO_Init+0x2a4>)
 8000a6c:	f000 fb48 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a70:	2332      	movs	r3, #50	; 0x32
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	484d      	ldr	r0, [pc, #308]	; (8000bc0 <MX_GPIO_Init+0x2b8>)
 8000a8c:	f000 fb38 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a90:	2386      	movs	r3, #134	; 0x86
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa0:	230b      	movs	r3, #11
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4846      	ldr	r0, [pc, #280]	; (8000bc4 <MX_GPIO_Init+0x2bc>)
 8000aac:	f000 fb28 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ab0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4839      	ldr	r0, [pc, #228]	; (8000bb0 <MX_GPIO_Init+0x2a8>)
 8000aca:	f000 fb19 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ad2:	2311      	movs	r3, #17
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x2ac>)
 8000ae6:	f000 fb0b 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afc:	230b      	movs	r3, #11
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0x2a8>)
 8000b08:	f000 fafa 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <MX_GPIO_Init+0x2ac>)
 8000b24:	f000 faec 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <MX_GPIO_Init+0x2ac>)
 8000b3c:	f000 fae0 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b40:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b52:	230a      	movs	r3, #10
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <MX_GPIO_Init+0x2bc>)
 8000b5e:	f000 facf 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_GPIO_Init+0x2bc>)
 8000b78:	f000 fac2 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_GPIO_Init+0x2ac>)
 8000b9a:	f000 fab1 	bl	8001100 <HAL_GPIO_Init>

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	; 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_TIM_Base_MspInit+0x48>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d115      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_TIM_Base_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x4c>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_TIM_Base_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201d      	movs	r0, #29
 8000c5c:	f000 fa19 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c60:	201d      	movs	r0, #29
 8000c62:	f000 fa32 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cf0:	f000 fa06 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40004800 	.word	0x40004800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f89e 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM3_IRQHandler+0x10>)
 8000d6a:	f001 f870 	bl	8001e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000090 	.word	0x20000090

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SystemInit+0x28>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <SystemInit+0x28>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SystemInit+0x28>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	609a      	str	r2, [r3, #8]
#endif
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000daa:	e003      	b.n	8000db4 <LoopCopyDataInit>

08000dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000db2:	3104      	adds	r1, #4

08000db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dbc:	d3f6      	bcc.n	8000dac <CopyDataInit>
  ldr  r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dc0:	e002      	b.n	8000dc8 <LoopFillZerobss>

08000dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc4:	f842 3b04 	str.w	r3, [r2], #4

08000dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dcc:	d3f9      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffd3 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f001 ffb7 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fc31 	bl	800063c <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ddc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000de0:	08002e3c 	.word	0x08002e3c
  ldr  r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000dec:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000df0:	200000d4 	.word	0x200000d4

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f92b 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fed4 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f943 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f90b 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000004 	.word	0x20000004
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000008 	.word	0x20000008

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	200000d0 	.word	0x200000d0

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200000d0 	.word	0x200000d0

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e177      	b.n	800140c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8166 	bne.w	8001406 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d00b      	beq.n	800115a <HAL_GPIO_Init+0x5a>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114e:	2b11      	cmp	r3, #17
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b12      	cmp	r3, #18
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0xfc>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80c0 	beq.w	8001406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b65      	ldr	r3, [pc, #404]	; (8001420 <HAL_GPIO_Init+0x320>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <HAL_GPIO_Init+0x320>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b62      	ldr	r3, [pc, #392]	; (8001420 <HAL_GPIO_Init+0x320>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a60      	ldr	r2, [pc, #384]	; (8001424 <HAL_GPIO_Init+0x324>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d037      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a56      	ldr	r2, [pc, #344]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a55      	ldr	r2, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x334>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a53      	ldr	r2, [pc, #332]	; (8001438 <HAL_GPIO_Init+0x338>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_GPIO_Init+0x33c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x22a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x340>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_GPIO_Init+0x344>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x348>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_Init+0x34c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x21a>
 8001316:	2309      	movs	r3, #9
 8001318:	e012      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131a:	230a      	movs	r3, #10
 800131c:	e010      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131e:	2308      	movs	r3, #8
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001322:	2307      	movs	r3, #7
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4934      	ldr	r1, [pc, #208]	; (8001424 <HAL_GPIO_Init+0x324>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001382:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_GPIO_Init+0x350>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae84 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	3724      	adds	r7, #36	; 0x24
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021c00 	.word	0x40021c00
 8001448:	40022000 	.word	0x40022000
 800144c:	40022400 	.word	0x40022400
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	401a      	ands	r2, r3
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d104      	bne.n	80014da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e25b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d075      	beq.n	80015f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	4ba3      	ldr	r3, [pc, #652]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d00c      	beq.n	8001530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d112      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152e:	d10b      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d05b      	beq.n	80015f4 <HAL_RCC_OscConfig+0x108>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d157      	bne.n	80015f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e236      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x74>
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x98>
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a8a      	ldr	r2, [pc, #552]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc8e 	bl	8000ec4 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fc8a 	bl	8000ec4 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1fb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xc0>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc7a 	bl	8000ec4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc76 	bl	8000ec4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1e7      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0xe8>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1bb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4952      	ldr	r1, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fc2f 	bl	8000ec4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fc2b 	bl	8000ec4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e19c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4940      	ldr	r1, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc0e 	bl	8000ec4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc0a 	bl	8000ec4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e17b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d030      	beq.n	8001738 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fbee 	bl	8000ec4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fbea 	bl	8000ec4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e15b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x200>
 800170a:	e015      	b.n	8001738 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbd7 	bl	8000ec4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fbd3 	bl	8000ec4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e144      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a0 	beq.w	8001886 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fb99 	bl	8000ec4 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e011      	b.n	80017ba <HAL_RCC_OscConfig+0x2ce>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	42470000 	.word	0x42470000
 80017a0:	42470e80 	.word	0x42470e80
 80017a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff fb8c 	bl	8000ec4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0fd      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f0>
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x312>
 80017e4:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a73      	ldr	r2, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017fe:	4b71      	ldr	r3, [pc, #452]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a70      	ldr	r2, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b6e      	ldr	r3, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a6d      	ldr	r2, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fb51 	bl	8000ec4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb4d 	bl	8000ec4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0bc      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x33a>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb3b 	bl	8000ec4 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb37 	bl	8000ec4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0a6      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8092 	beq.w	80019b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d05c      	beq.n	8001956 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d141      	bne.n	8001928 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb0b 	bl	8000ec4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fb07 	bl	8000ec4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e078      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	4933      	ldr	r1, [pc, #204]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fae0 	bl	8000ec4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fadc 	bl	8000ec4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04d      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x41c>
 8001926:	e045      	b.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fac9 	bl	8000ec4 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fac5 	bl	8000ec4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e036      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x44a>
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e029      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	429a      	cmp	r2, r3
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d115      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470060 	.word	0x42470060

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cc      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d90c      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d044      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e067      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4934      	ldr	r1, [pc, #208]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff fa02 	bl	8000ec4 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff f9fe 	bl	8000ec4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d20c      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4601      	mov	r1, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	fa21 f303 	lsr.w	r3, r1, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f962 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08002e14 	.word	0x08002e14
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d007      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x32>
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x38>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80b4 	bne.w	8001d2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bc6:	60bb      	str	r3, [r7, #8]
       break;
 8001bc8:	e0b3      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bcc:	60bb      	str	r3, [r7, #8]
      break;
 8001bce:	e0b0      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04a      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	ea03 0501 	and.w	r5, r3, r1
 8001bfc:	ea04 0602 	and.w	r6, r4, r2
 8001c00:	4629      	mov	r1, r5
 8001c02:	4632      	mov	r2, r6
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	f04f 0400 	mov.w	r4, #0
 8001c0c:	0154      	lsls	r4, r2, #5
 8001c0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c12:	014b      	lsls	r3, r1, #5
 8001c14:	4619      	mov	r1, r3
 8001c16:	4622      	mov	r2, r4
 8001c18:	1b49      	subs	r1, r1, r5
 8001c1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f04f 0400 	mov.w	r4, #0
 8001c26:	0194      	lsls	r4, r2, #6
 8001c28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c2c:	018b      	lsls	r3, r1, #6
 8001c2e:	1a5b      	subs	r3, r3, r1
 8001c30:	eb64 0402 	sbc.w	r4, r4, r2
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	00e2      	lsls	r2, r4, #3
 8001c3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c42:	00d9      	lsls	r1, r3, #3
 8001c44:	460b      	mov	r3, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	195b      	adds	r3, r3, r5
 8001c4a:	eb44 0406 	adc.w	r4, r4, r6
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	0262      	lsls	r2, r4, #9
 8001c58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c5c:	0259      	lsls	r1, r3, #9
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	4621      	mov	r1, r4
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f04f 0400 	mov.w	r4, #0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	f7fe fabc 	bl	80001ec <__aeabi_uldivmod>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e049      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	f04f 0400 	mov.w	r4, #0
 8001c86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	ea03 0501 	and.w	r5, r3, r1
 8001c92:	ea04 0602 	and.w	r6, r4, r2
 8001c96:	4629      	mov	r1, r5
 8001c98:	4632      	mov	r2, r6
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	0154      	lsls	r4, r2, #5
 8001ca4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca8:	014b      	lsls	r3, r1, #5
 8001caa:	4619      	mov	r1, r3
 8001cac:	4622      	mov	r2, r4
 8001cae:	1b49      	subs	r1, r1, r5
 8001cb0:	eb62 0206 	sbc.w	r2, r2, r6
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	0194      	lsls	r4, r2, #6
 8001cbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cc2:	018b      	lsls	r3, r1, #6
 8001cc4:	1a5b      	subs	r3, r3, r1
 8001cc6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cd8:	00d9      	lsls	r1, r3, #3
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	195b      	adds	r3, r3, r5
 8001ce0:	eb44 0406 	adc.w	r4, r4, r6
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	02a2      	lsls	r2, r4, #10
 8001cee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cf2:	0299      	lsls	r1, r3, #10
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f04f 0400 	mov.w	r4, #0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	f7fe fa71 	bl	80001ec <__aeabi_uldivmod>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	60bb      	str	r3, [r7, #8]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d2e:	60bb      	str	r3, [r7, #8]
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	68bb      	ldr	r3, [r7, #8]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4601      	mov	r1, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08002e24 	.word	0x08002e24

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4601      	mov	r1, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08002e24 	.word	0x08002e24

08001db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e01d      	b.n	8001dfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe ff26 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3304      	adds	r3, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f000 fa14 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d007      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d122      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d11b      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0202 	mvn.w	r2, #2
 8001e7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f9a5 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001e96:	e005      	b.n	8001ea4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f997 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f9a8 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d122      	bne.n	8001efe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d11b      	bne.n	8001efe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0204 	mvn.w	r2, #4
 8001ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f97b 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001eea:	e005      	b.n	8001ef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f96d 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f97e 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d122      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11b      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f06f 0208 	mvn.w	r2, #8
 8001f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2204      	movs	r2, #4
 8001f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f951 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001f3e:	e005      	b.n	8001f4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f943 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f954 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d122      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f06f 0210 	mvn.w	r2, #16
 8001f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f927 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001f92:	e005      	b.n	8001fa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f919 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f92a 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0201 	mvn.w	r2, #1
 8001fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7fe fa8d 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d10e      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 facf 	bl	800259c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d10e      	bne.n	800202a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d107      	bne.n	800202a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8ef 	bl	8002208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b20      	cmp	r3, #32
 8002036:	d10e      	bne.n	8002056 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b20      	cmp	r3, #32
 8002044:	d107      	bne.n	8002056 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0220 	mvn.w	r2, #32
 800204e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fa99 	bl	8002588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_TIM_ConfigClockSource+0x18>
 8002072:	2302      	movs	r3, #2
 8002074:	e0a6      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x166>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800209c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d067      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x120>
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d80b      	bhi.n	80020ca <HAL_TIM_ConfigClockSource+0x6c>
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d073      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x140>
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d802      	bhi.n	80020c0 <HAL_TIM_ConfigClockSource+0x62>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06f      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020be:	e078      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d06c      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x140>
 80020c4:	2b30      	cmp	r3, #48	; 0x30
 80020c6:	d06a      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020c8:	e073      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020ca:	2b70      	cmp	r3, #112	; 0x70
 80020cc:	d00d      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x8c>
 80020ce:	2b70      	cmp	r3, #112	; 0x70
 80020d0:	d804      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x7e>
 80020d2:	2b50      	cmp	r3, #80	; 0x50
 80020d4:	d033      	beq.n	800213e <HAL_TIM_ConfigClockSource+0xe0>
 80020d6:	2b60      	cmp	r3, #96	; 0x60
 80020d8:	d041      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020da:	e06a      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d066      	beq.n	80021b0 <HAL_TIM_ConfigClockSource+0x152>
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e6:	d017      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020e8:	e063      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f000 f9a9 	bl	8002450 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800210c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	609a      	str	r2, [r3, #8]
      break;
 8002116:	e04c      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f000 f992 	bl	8002450 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213a:	609a      	str	r2, [r3, #8]
      break;
 800213c:	e039      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f000 f906 	bl	800235c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2150      	movs	r1, #80	; 0x50
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f95f 	bl	800241a <TIM_ITRx_SetConfig>
      break;
 800215c:	e029      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f000 f925 	bl	80023ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2160      	movs	r1, #96	; 0x60
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f94f 	bl	800241a <TIM_ITRx_SetConfig>
      break;
 800217c:	e019      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	f000 f8e6 	bl	800235c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f93f 	bl	800241a <TIM_ITRx_SetConfig>
      break;
 800219c:	e009      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f000 f936 	bl	800241a <TIM_ITRx_SetConfig>
      break;
 80021ae:	e000      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a40      	ldr	r2, [pc, #256]	; (8002330 <TIM_Base_SetConfig+0x114>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223a:	d00f      	beq.n	800225c <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <TIM_Base_SetConfig+0x118>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00b      	beq.n	800225c <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <TIM_Base_SetConfig+0x11c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d007      	beq.n	800225c <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <TIM_Base_SetConfig+0x120>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d003      	beq.n	800225c <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <TIM_Base_SetConfig+0x124>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d108      	bne.n	800226e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <TIM_Base_SetConfig+0x114>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227c:	d027      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <TIM_Base_SetConfig+0x118>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d023      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <TIM_Base_SetConfig+0x11c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2a      	ldr	r2, [pc, #168]	; (800233c <TIM_Base_SetConfig+0x120>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01b      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <TIM_Base_SetConfig+0x124>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d017      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a28      	ldr	r2, [pc, #160]	; (8002344 <TIM_Base_SetConfig+0x128>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <TIM_Base_SetConfig+0x12c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00f      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <TIM_Base_SetConfig+0x130>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a25      	ldr	r2, [pc, #148]	; (8002350 <TIM_Base_SetConfig+0x134>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <TIM_Base_SetConfig+0x138>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <TIM_Base_SetConfig+0x13c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <TIM_Base_SetConfig+0x114>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_Base_SetConfig+0xf8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <TIM_Base_SetConfig+0x124>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d103      	bne.n	800231c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	615a      	str	r2, [r3, #20]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40000c00 	.word	0x40000c00
 8002340:	40010400 	.word	0x40010400
 8002344:	40014000 	.word	0x40014000
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800
 8002350:	40001800 	.word	0x40001800
 8002354:	40001c00 	.word	0x40001c00
 8002358:	40002000 	.word	0x40002000

0800235c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f023 030a 	bic.w	r3, r3, #10
 8002398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b087      	sub	sp, #28
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f023 0210 	bic.w	r2, r3, #16
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	031b      	lsls	r3, r3, #12
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	f043 0307 	orr.w	r3, r3, #7
 800243c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	431a      	orrs	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e05a      	b.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d01d      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d018      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10c      	bne.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4313      	orrs	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40010400 	.word	0x40010400
 8002580:	40014000 	.word	0x40014000
 8002584:	40001800 	.word	0x40001800

08002588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e03f      	b.n	8002642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fb4e 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f829 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800268e:	f023 030c 	bic.w	r3, r3, #12
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	430b      	orrs	r3, r1
 800269a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	f040 818b 	bne.w	80029d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4ac1      	ldr	r2, [pc, #772]	; (80029c8 <UART_SetConfig+0x37c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d005      	beq.n	80026d4 <UART_SetConfig+0x88>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4abf      	ldr	r2, [pc, #764]	; (80029cc <UART_SetConfig+0x380>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f040 80bd 	bne.w	800284e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026d4:	f7ff fb58 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 80026d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	461d      	mov	r5, r3
 80026de:	f04f 0600 	mov.w	r6, #0
 80026e2:	46a8      	mov	r8, r5
 80026e4:	46b1      	mov	r9, r6
 80026e6:	eb18 0308 	adds.w	r3, r8, r8
 80026ea:	eb49 0409 	adc.w	r4, r9, r9
 80026ee:	4698      	mov	r8, r3
 80026f0:	46a1      	mov	r9, r4
 80026f2:	eb18 0805 	adds.w	r8, r8, r5
 80026f6:	eb49 0906 	adc.w	r9, r9, r6
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002706:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800270a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800270e:	4688      	mov	r8, r1
 8002710:	4691      	mov	r9, r2
 8002712:	eb18 0005 	adds.w	r0, r8, r5
 8002716:	eb49 0106 	adc.w	r1, r9, r6
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	461d      	mov	r5, r3
 8002720:	f04f 0600 	mov.w	r6, #0
 8002724:	196b      	adds	r3, r5, r5
 8002726:	eb46 0406 	adc.w	r4, r6, r6
 800272a:	461a      	mov	r2, r3
 800272c:	4623      	mov	r3, r4
 800272e:	f7fd fd5d 	bl	80001ec <__aeabi_uldivmod>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	461a      	mov	r2, r3
 8002738:	4ba5      	ldr	r3, [pc, #660]	; (80029d0 <UART_SetConfig+0x384>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	461d      	mov	r5, r3
 8002748:	f04f 0600 	mov.w	r6, #0
 800274c:	46a9      	mov	r9, r5
 800274e:	46b2      	mov	sl, r6
 8002750:	eb19 0309 	adds.w	r3, r9, r9
 8002754:	eb4a 040a 	adc.w	r4, sl, sl
 8002758:	4699      	mov	r9, r3
 800275a:	46a2      	mov	sl, r4
 800275c:	eb19 0905 	adds.w	r9, r9, r5
 8002760:	eb4a 0a06 	adc.w	sl, sl, r6
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002770:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002774:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002778:	4689      	mov	r9, r1
 800277a:	4692      	mov	sl, r2
 800277c:	eb19 0005 	adds.w	r0, r9, r5
 8002780:	eb4a 0106 	adc.w	r1, sl, r6
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	461d      	mov	r5, r3
 800278a:	f04f 0600 	mov.w	r6, #0
 800278e:	196b      	adds	r3, r5, r5
 8002790:	eb46 0406 	adc.w	r4, r6, r6
 8002794:	461a      	mov	r2, r3
 8002796:	4623      	mov	r3, r4
 8002798:	f7fd fd28 	bl	80001ec <__aeabi_uldivmod>
 800279c:	4603      	mov	r3, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <UART_SetConfig+0x384>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a86      	ldr	r2, [pc, #536]	; (80029d0 <UART_SetConfig+0x384>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c4:	4498      	add	r8, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	461d      	mov	r5, r3
 80027ca:	f04f 0600 	mov.w	r6, #0
 80027ce:	46a9      	mov	r9, r5
 80027d0:	46b2      	mov	sl, r6
 80027d2:	eb19 0309 	adds.w	r3, r9, r9
 80027d6:	eb4a 040a 	adc.w	r4, sl, sl
 80027da:	4699      	mov	r9, r3
 80027dc:	46a2      	mov	sl, r4
 80027de:	eb19 0905 	adds.w	r9, r9, r5
 80027e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027fa:	4689      	mov	r9, r1
 80027fc:	4692      	mov	sl, r2
 80027fe:	eb19 0005 	adds.w	r0, r9, r5
 8002802:	eb4a 0106 	adc.w	r1, sl, r6
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	461d      	mov	r5, r3
 800280c:	f04f 0600 	mov.w	r6, #0
 8002810:	196b      	adds	r3, r5, r5
 8002812:	eb46 0406 	adc.w	r4, r6, r6
 8002816:	461a      	mov	r2, r3
 8002818:	4623      	mov	r3, r4
 800281a:	f7fd fce7 	bl	80001ec <__aeabi_uldivmod>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	461a      	mov	r2, r3
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <UART_SetConfig+0x384>)
 8002826:	fba3 1302 	umull	r1, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2164      	movs	r1, #100	; 0x64
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	3332      	adds	r3, #50	; 0x32
 8002838:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <UART_SetConfig+0x384>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	f003 0207 	and.w	r2, r3, #7
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4442      	add	r2, r8
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e26f      	b.n	8002d2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800284e:	f7ff fa87 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002852:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	461d      	mov	r5, r3
 8002858:	f04f 0600 	mov.w	r6, #0
 800285c:	46a8      	mov	r8, r5
 800285e:	46b1      	mov	r9, r6
 8002860:	eb18 0308 	adds.w	r3, r8, r8
 8002864:	eb49 0409 	adc.w	r4, r9, r9
 8002868:	4698      	mov	r8, r3
 800286a:	46a1      	mov	r9, r4
 800286c:	eb18 0805 	adds.w	r8, r8, r5
 8002870:	eb49 0906 	adc.w	r9, r9, r6
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002880:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002884:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002888:	4688      	mov	r8, r1
 800288a:	4691      	mov	r9, r2
 800288c:	eb18 0005 	adds.w	r0, r8, r5
 8002890:	eb49 0106 	adc.w	r1, r9, r6
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	461d      	mov	r5, r3
 800289a:	f04f 0600 	mov.w	r6, #0
 800289e:	196b      	adds	r3, r5, r5
 80028a0:	eb46 0406 	adc.w	r4, r6, r6
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	f7fd fca0 	bl	80001ec <__aeabi_uldivmod>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <UART_SetConfig+0x384>)
 80028b4:	fba3 2302 	umull	r2, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	461d      	mov	r5, r3
 80028c2:	f04f 0600 	mov.w	r6, #0
 80028c6:	46a9      	mov	r9, r5
 80028c8:	46b2      	mov	sl, r6
 80028ca:	eb19 0309 	adds.w	r3, r9, r9
 80028ce:	eb4a 040a 	adc.w	r4, sl, sl
 80028d2:	4699      	mov	r9, r3
 80028d4:	46a2      	mov	sl, r4
 80028d6:	eb19 0905 	adds.w	r9, r9, r5
 80028da:	eb4a 0a06 	adc.w	sl, sl, r6
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f2:	4689      	mov	r9, r1
 80028f4:	4692      	mov	sl, r2
 80028f6:	eb19 0005 	adds.w	r0, r9, r5
 80028fa:	eb4a 0106 	adc.w	r1, sl, r6
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	461d      	mov	r5, r3
 8002904:	f04f 0600 	mov.w	r6, #0
 8002908:	196b      	adds	r3, r5, r5
 800290a:	eb46 0406 	adc.w	r4, r6, r6
 800290e:	461a      	mov	r2, r3
 8002910:	4623      	mov	r3, r4
 8002912:	f7fd fc6b 	bl	80001ec <__aeabi_uldivmod>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	461a      	mov	r2, r3
 800291c:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <UART_SetConfig+0x384>)
 800291e:	fba3 1302 	umull	r1, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2164      	movs	r1, #100	; 0x64
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	3332      	adds	r3, #50	; 0x32
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <UART_SetConfig+0x384>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800293e:	4498      	add	r8, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	461d      	mov	r5, r3
 8002944:	f04f 0600 	mov.w	r6, #0
 8002948:	46a9      	mov	r9, r5
 800294a:	46b2      	mov	sl, r6
 800294c:	eb19 0309 	adds.w	r3, r9, r9
 8002950:	eb4a 040a 	adc.w	r4, sl, sl
 8002954:	4699      	mov	r9, r3
 8002956:	46a2      	mov	sl, r4
 8002958:	eb19 0905 	adds.w	r9, r9, r5
 800295c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800296c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002974:	4689      	mov	r9, r1
 8002976:	4692      	mov	sl, r2
 8002978:	eb19 0005 	adds.w	r0, r9, r5
 800297c:	eb4a 0106 	adc.w	r1, sl, r6
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	461d      	mov	r5, r3
 8002986:	f04f 0600 	mov.w	r6, #0
 800298a:	196b      	adds	r3, r5, r5
 800298c:	eb46 0406 	adc.w	r4, r6, r6
 8002990:	461a      	mov	r2, r3
 8002992:	4623      	mov	r3, r4
 8002994:	f7fd fc2a 	bl	80001ec <__aeabi_uldivmod>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	461a      	mov	r2, r3
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <UART_SetConfig+0x384>)
 80029a0:	fba3 1302 	umull	r1, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2164      	movs	r1, #100	; 0x64
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3332      	adds	r3, #50	; 0x32
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <UART_SetConfig+0x384>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4442      	add	r2, r8
 80029c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029c6:	e1b2      	b.n	8002d2e <UART_SetConfig+0x6e2>
 80029c8:	40011000 	.word	0x40011000
 80029cc:	40011400 	.word	0x40011400
 80029d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4ad7      	ldr	r2, [pc, #860]	; (8002d38 <UART_SetConfig+0x6ec>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d005      	beq.n	80029ea <UART_SetConfig+0x39e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4ad6      	ldr	r2, [pc, #856]	; (8002d3c <UART_SetConfig+0x6f0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	f040 80d1 	bne.w	8002b8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029ea:	f7ff f9cd 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 80029ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	469a      	mov	sl, r3
 80029f4:	f04f 0b00 	mov.w	fp, #0
 80029f8:	46d0      	mov	r8, sl
 80029fa:	46d9      	mov	r9, fp
 80029fc:	eb18 0308 	adds.w	r3, r8, r8
 8002a00:	eb49 0409 	adc.w	r4, r9, r9
 8002a04:	4698      	mov	r8, r3
 8002a06:	46a1      	mov	r9, r4
 8002a08:	eb18 080a 	adds.w	r8, r8, sl
 8002a0c:	eb49 090b 	adc.w	r9, r9, fp
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a24:	4688      	mov	r8, r1
 8002a26:	4691      	mov	r9, r2
 8002a28:	eb1a 0508 	adds.w	r5, sl, r8
 8002a2c:	eb4b 0609 	adc.w	r6, fp, r9
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f04f 0400 	mov.w	r4, #0
 8002a42:	0094      	lsls	r4, r2, #2
 8002a44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a48:	008b      	lsls	r3, r1, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4631      	mov	r1, r6
 8002a52:	f7fd fbcb 	bl	80001ec <__aeabi_uldivmod>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4bb8      	ldr	r3, [pc, #736]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	469b      	mov	fp, r3
 8002a6c:	f04f 0c00 	mov.w	ip, #0
 8002a70:	46d9      	mov	r9, fp
 8002a72:	46e2      	mov	sl, ip
 8002a74:	eb19 0309 	adds.w	r3, r9, r9
 8002a78:	eb4a 040a 	adc.w	r4, sl, sl
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	46a2      	mov	sl, r4
 8002a80:	eb19 090b 	adds.w	r9, r9, fp
 8002a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	4692      	mov	sl, r2
 8002aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8002aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	0094      	lsls	r4, r2, #2
 8002abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	4631      	mov	r1, r6
 8002aca:	f7fd fb8f 	bl	80001ec <__aeabi_uldivmod>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b9a      	ldr	r3, [pc, #616]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2164      	movs	r1, #100	; 0x64
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a95      	ldr	r2, [pc, #596]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af4:	4498      	add	r8, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	469b      	mov	fp, r3
 8002afa:	f04f 0c00 	mov.w	ip, #0
 8002afe:	46d9      	mov	r9, fp
 8002b00:	46e2      	mov	sl, ip
 8002b02:	eb19 0309 	adds.w	r3, r9, r9
 8002b06:	eb4a 040a 	adc.w	r4, sl, sl
 8002b0a:	4699      	mov	r9, r3
 8002b0c:	46a2      	mov	sl, r4
 8002b0e:	eb19 090b 	adds.w	r9, r9, fp
 8002b12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b2a:	4689      	mov	r9, r1
 8002b2c:	4692      	mov	sl, r2
 8002b2e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b32:	eb4c 060a 	adc.w	r6, ip, sl
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	0094      	lsls	r4, r2, #2
 8002b4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b4e:	008b      	lsls	r3, r1, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	4631      	mov	r1, r6
 8002b58:	f7fd fb48 	bl	80001ec <__aeabi_uldivmod>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b77      	ldr	r3, [pc, #476]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2164      	movs	r1, #100	; 0x64
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	3332      	adds	r3, #50	; 0x32
 8002b76:	4a72      	ldr	r2, [pc, #456]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4442      	add	r2, r8
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	e0d0      	b.n	8002d2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f7ff f8e8 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002b90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	469a      	mov	sl, r3
 8002b96:	f04f 0b00 	mov.w	fp, #0
 8002b9a:	46d0      	mov	r8, sl
 8002b9c:	46d9      	mov	r9, fp
 8002b9e:	eb18 0308 	adds.w	r3, r8, r8
 8002ba2:	eb49 0409 	adc.w	r4, r9, r9
 8002ba6:	4698      	mov	r8, r3
 8002ba8:	46a1      	mov	r9, r4
 8002baa:	eb18 080a 	adds.w	r8, r8, sl
 8002bae:	eb49 090b 	adc.w	r9, r9, fp
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bc6:	4688      	mov	r8, r1
 8002bc8:	4691      	mov	r9, r2
 8002bca:	eb1a 0508 	adds.w	r5, sl, r8
 8002bce:	eb4b 0609 	adc.w	r6, fp, r9
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	f04f 0400 	mov.w	r4, #0
 8002be4:	0094      	lsls	r4, r2, #2
 8002be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bea:	008b      	lsls	r3, r1, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	4631      	mov	r1, r6
 8002bf4:	f7fd fafa 	bl	80001ec <__aeabi_uldivmod>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002c00:	fba3 2302 	umull	r2, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	469b      	mov	fp, r3
 8002c0e:	f04f 0c00 	mov.w	ip, #0
 8002c12:	46d9      	mov	r9, fp
 8002c14:	46e2      	mov	sl, ip
 8002c16:	eb19 0309 	adds.w	r3, r9, r9
 8002c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c1e:	4699      	mov	r9, r3
 8002c20:	46a2      	mov	sl, r4
 8002c22:	eb19 090b 	adds.w	r9, r9, fp
 8002c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c3e:	4689      	mov	r9, r1
 8002c40:	4692      	mov	sl, r2
 8002c42:	eb1b 0509 	adds.w	r5, fp, r9
 8002c46:	eb4c 060a 	adc.w	r6, ip, sl
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	0094      	lsls	r4, r2, #2
 8002c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	f7fd fabe 	bl	80001ec <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c96:	4498      	add	r8, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	469b      	mov	fp, r3
 8002c9c:	f04f 0c00 	mov.w	ip, #0
 8002ca0:	46d9      	mov	r9, fp
 8002ca2:	46e2      	mov	sl, ip
 8002ca4:	eb19 0309 	adds.w	r3, r9, r9
 8002ca8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cac:	4699      	mov	r9, r3
 8002cae:	46a2      	mov	sl, r4
 8002cb0:	eb19 090b 	adds.w	r9, r9, fp
 8002cb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cb8:	f04f 0100 	mov.w	r1, #0
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ccc:	4689      	mov	r9, r1
 8002cce:	4692      	mov	sl, r2
 8002cd0:	eb1b 0509 	adds.w	r5, fp, r9
 8002cd4:	eb4c 060a 	adc.w	r6, ip, sl
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	f04f 0400 	mov.w	r4, #0
 8002cea:	0094      	lsls	r4, r2, #2
 8002cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cf0:	008b      	lsls	r3, r1, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	f7fd fa77 	bl	80001ec <__aeabi_uldivmod>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	460c      	mov	r4, r1
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002d06:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2164      	movs	r1, #100	; 0x64
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <UART_SetConfig+0x6f4>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4442      	add	r2, r8
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	e7ff      	b.n	8002d2e <UART_SetConfig+0x6e2>
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	40011000 	.word	0x40011000
 8002d3c:	40011400 	.word	0x40011400
 8002d40:	51eb851f 	.word	0x51eb851f

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4e0d      	ldr	r6, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1ba4      	subs	r4, r4, r6
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2500      	movs	r5, #0
 8002d50:	42a5      	cmp	r5, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4e0b      	ldr	r6, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f000 f830 	bl	8002dbc <_init>
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2500      	movs	r5, #0
 8002d62:	42a5      	cmp	r5, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6c:	4798      	blx	r3
 8002d6e:	3501      	adds	r5, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d76:	4798      	blx	r3
 8002d78:	3501      	adds	r5, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08002e34 	.word	0x08002e34
 8002d80:	08002e34 	.word	0x08002e34
 8002d84:	08002e34 	.word	0x08002e34
 8002d88:	08002e38 	.word	0x08002e38

08002d8c <memcmp>:
 8002d8c:	b530      	push	{r4, r5, lr}
 8002d8e:	2400      	movs	r4, #0
 8002d90:	42a2      	cmp	r2, r4
 8002d92:	d101      	bne.n	8002d98 <memcmp+0xc>
 8002d94:	2000      	movs	r0, #0
 8002d96:	e007      	b.n	8002da8 <memcmp+0x1c>
 8002d98:	5d03      	ldrb	r3, [r0, r4]
 8002d9a:	3401      	adds	r4, #1
 8002d9c:	190d      	adds	r5, r1, r4
 8002d9e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8002da2:	42ab      	cmp	r3, r5
 8002da4:	d0f4      	beq.n	8002d90 <memcmp+0x4>
 8002da6:	1b58      	subs	r0, r3, r5
 8002da8:	bd30      	pop	{r4, r5, pc}

08002daa <memset>:
 8002daa:	4402      	add	r2, r0
 8002dac:	4603      	mov	r3, r0
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d100      	bne.n	8002db4 <memset+0xa>
 8002db2:	4770      	bx	lr
 8002db4:	f803 1b01 	strb.w	r1, [r3], #1
 8002db8:	e7f9      	b.n	8002dae <memset+0x4>
	...

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
