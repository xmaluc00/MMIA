
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b78  08006b78  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08006b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08006d48  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08006d48  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012767  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b25  00000000  00000000  0003295f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259b7  00000000  00000000  00036cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000caeb  00000000  00000000  0005c667  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a25  00000000  00000000  00069152  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eb77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  0013ebf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c8 	.word	0x200001c8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006af8 	.word	0x08006af8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001cc 	.word	0x200001cc
 80001e8:	08006af8 	.word	0x08006af8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fad9 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f82b 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8bd 	bl	8000678 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004fe:	f000 f891 	bl	8000624 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000502:	f005 fdd1 	bl	80060a8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do { HAL_Delay(40); } while (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin));
 8000506:	2028      	movs	r0, #40	; 0x28
 8000508:	f000 fb40 	bl	8000b8c <HAL_Delay>
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <main+0x5c>)
 8000512:	f000 fe19 	bl	8001148 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f4      	bne.n	8000506 <main+0x1a>

	  uint8_t buff[4];

	  buff[0] = 0x01; // stiskni leve tlacitko
 800051c:	2301      	movs	r3, #1
 800051e:	713b      	strb	r3, [r7, #4]
	  buff[1] = (int8_t)(10); // posun X +10
 8000520:	230a      	movs	r3, #10
 8000522:	717b      	strb	r3, [r7, #5]
	  buff[2] = (int8_t)(-3); // posun Y -3
 8000524:	23fd      	movs	r3, #253	; 0xfd
 8000526:	71bb      	strb	r3, [r7, #6]
	  buff[3] = 0; // bez scrollu
 8000528:	2300      	movs	r3, #0
 800052a:	71fb      	strb	r3, [r7, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2204      	movs	r2, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x60>)
 8000534:	f004 fc48 	bl	8004dc8 <USBD_HID_SendReport>
	  HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <main+0x60>)
 800053a:	f004 fc67 	bl	8004e0c <USBD_HID_GetPollingInterval>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fb23 	bl	8000b8c <HAL_Delay>
  {
 8000546:	e7de      	b.n	8000506 <main+0x1a>
 8000548:	40020800 	.word	0x40020800
 800054c:	20000238 	.word	0x20000238

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fa08 	bl	8006974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	; 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff53 	bl	8002480 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f93c 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f9ac 	bl	8002960 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 f925 	bl	800085c <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART3_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART3_UART_Init+0x4c>)
 800065c:	f002 fb72 	bl	8002d44 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f8f9 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001f4 	.word	0x200001f4
 8000674:	40004800 	.word	0x40004800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b6c      	ldr	r3, [pc, #432]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a6b      	ldr	r2, [pc, #428]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b69      	ldr	r3, [pc, #420]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b65      	ldr	r3, [pc, #404]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a64      	ldr	r2, [pc, #400]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b62      	ldr	r3, [pc, #392]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b5e      	ldr	r3, [pc, #376]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a5d      	ldr	r2, [pc, #372]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b5b      	ldr	r3, [pc, #364]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b57      	ldr	r3, [pc, #348]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a56      	ldr	r2, [pc, #344]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b54      	ldr	r3, [pc, #336]	; (8000844 <MX_GPIO_Init+0x1cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b50      	ldr	r3, [pc, #320]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a48      	ldr	r2, [pc, #288]	; (8000844 <MX_GPIO_Init+0x1cc>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_GPIO_Init+0x1cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f244 0181 	movw	r1, #16513	; 0x4081
 800073c:	4842      	ldr	r0, [pc, #264]	; (8000848 <MX_GPIO_Init+0x1d0>)
 800073e:	f000 fd1b 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4841      	ldr	r0, [pc, #260]	; (800084c <MX_GPIO_Init+0x1d4>)
 8000748:	f000 fd16 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000752:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <MX_GPIO_Init+0x1d8>)
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	483c      	ldr	r0, [pc, #240]	; (8000854 <MX_GPIO_Init+0x1dc>)
 8000762:	f000 fb47 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000766:	2332      	movs	r3, #50	; 0x32
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000776:	230b      	movs	r3, #11
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4834      	ldr	r0, [pc, #208]	; (8000854 <MX_GPIO_Init+0x1dc>)
 8000782:	f000 fb37 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000786:	2386      	movs	r3, #134	; 0x86
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80007a2:	f000 fb27 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x1d0>)
 80007c0:	f000 fb18 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4819      	ldr	r0, [pc, #100]	; (8000848 <MX_GPIO_Init+0x1d0>)
 80007e2:	f000 fb07 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4813      	ldr	r0, [pc, #76]	; (800084c <MX_GPIO_Init+0x1d4>)
 80007fe:	f000 faf9 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_GPIO_Init+0x1d4>)
 8000816:	f000 faed 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800081a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082c:	230b      	movs	r3, #11
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x1d4>)
 8000838:	f000 fadc 	bl	8000df4 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400
 800084c:	40021800 	.word	0x40021800
 8000850:	10110000 	.word	0x10110000
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_UART_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_UART_MspInit+0x88>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_UART_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000928:	2307      	movs	r3, #7
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_UART_MspInit+0x8c>)
 8000934:	f000 fa5e 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40004800 	.word	0x40004800
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f8d4 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <OTG_FS_IRQHandler+0x10>)
 80009ae:	f000 fd4c 	bl	800144a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000708 	.word	0x20000708

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f005 ff88 	bl	8006900 <__errno>
 80009f0:	4602      	mov	r2, r0
 80009f2:	230c      	movs	r3, #12
 80009f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20030000 	.word	0x20030000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	200001e4 	.word	0x200001e4
 8000a24:	20000b18 	.word	0x20000b18

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x28>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x28>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SystemInit+0x28>)
 8000a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a42:	609a      	str	r2, [r3, #8]
#endif
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
  ldr  r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd3 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f005 ff43 	bl	800690c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd31 	bl	80004ec <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a8c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a90:	08006b80 	.word	0x08006b80
  ldr  r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a98:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000a9c:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000aa0:	20000b14 	.word	0x20000b14

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94d 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fec6 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f965 	bl	8000dda <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f92d 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000234 	.word	0x20000234

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000234 	.word	0x20000234

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_Delay+0x40>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e177      	b.n	8001100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8166 	bne.w	80010fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d00b      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	2b11      	cmp	r3, #17
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0xfc>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80c0 	beq.w	80010fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b65      	ldr	r3, [pc, #404]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a64      	ldr	r2, [pc, #400]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_GPIO_Init+0x328>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d037      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a56      	ldr	r2, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x32c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_GPIO_Init+0x23a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a55      	ldr	r2, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x236>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_GPIO_Init+0x334>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x232>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a53      	ldr	r2, [pc, #332]	; (800112c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x22e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x22a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x21a>
 800100a:	2309      	movs	r3, #9
 800100c:	e012      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800100e:	230a      	movs	r3, #10
 8001010:	e010      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001012:	2308      	movs	r3, #8
 8001014:	e00e      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001016:	2307      	movs	r3, #7
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101a:	2306      	movs	r3, #6
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_GPIO_Init+0x324>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_GPIO_Init+0x350>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae84 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	3724      	adds	r7, #36	; 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40022000 	.word	0x40022000
 8001140:	40022400 	.word	0x40022400
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e001      	b.n	800116a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ac:	b08f      	sub	sp, #60	; 0x3c
 80011ae:	af0a      	add	r7, sp, #40	; 0x28
 80011b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e10f      	b.n	80013dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f005 f89a 	bl	8006310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fa81 	bl	8003702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	687e      	ldr	r6, [r7, #4]
 8001208:	466d      	mov	r5, sp
 800120a:	f106 0410 	add.w	r4, r6, #16
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800121a:	e885 0003 	stmia.w	r5, {r0, r1}
 800121e:	1d33      	adds	r3, r6, #4
 8001220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f002 f958 	bl	80034d8 <USB_CoreInit>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2202      	movs	r2, #2
 8001232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0d0      	b.n	80013dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fa6f 	bl	8003724 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e04a      	b.n	80012e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	333d      	adds	r3, #61	; 0x3d
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	333c      	adds	r3, #60	; 0x3c
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	b298      	uxth	r0, r3
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3342      	adds	r3, #66	; 0x42
 8001288:	4602      	mov	r2, r0
 800128a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	333f      	adds	r3, #63	; 0x3f
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3344      	adds	r3, #68	; 0x44
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3348      	adds	r3, #72	; 0x48
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3350      	adds	r3, #80	; 0x50
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3af      	bcc.n	800124c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e044      	b.n	800137c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3b5      	bcc.n	80012f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	687e      	ldr	r6, [r7, #4]
 800138e:	466d      	mov	r5, sp
 8001390:	f106 0410 	add.w	r4, r6, #16
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a4:	1d33      	adds	r3, r6, #4
 80013a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a8:	6838      	ldr	r0, [r7, #0]
 80013aa:	f002 f9e5 	bl	8003778 <USB_DevInit>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00d      	b.n	80013dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa2d 	bl	8004834 <USB_DevDisconnect>

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_PCD_Start+0x1c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e020      	b.n	8001442 <HAL_PCD_Start+0x5e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b01      	cmp	r3, #1
 800140e:	d109      	bne.n	8001424 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f959 	bl	80036e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 f9dd 	bl	80047f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800144a:	b590      	push	{r4, r7, lr}
 800144c:	b08d      	sub	sp, #52	; 0x34
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fa9b 	bl	800499c <USB_GetMode>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 839d 	bne.w	8001ba8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f9ff 	bl	8004876 <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8393 	beq.w	8001ba6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f9f6 	bl	8004876 <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b02      	cmp	r3, #2
 8001492:	d107      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f002 0202 	and.w	r2, r2, #2
 80014a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f9e4 	bl	8004876 <USB_ReadInterrupts>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d161      	bne.n	800157c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0210 	bic.w	r2, r2, #16
 80014c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f003 020f 	and.w	r2, r3, #15
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	0c5b      	lsrs	r3, r3, #17
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d124      	bne.n	800153e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d035      	beq.n	800156c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800150a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	6a38      	ldr	r0, [r7, #32]
 8001514:	f003 f84a 	bl	80045ac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001524:	441a      	add	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001536:	441a      	add	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e016      	b.n	800156c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	0c5b      	lsrs	r3, r3, #17
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	2b06      	cmp	r3, #6
 8001548:	d110      	bne.n	800156c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001550:	2208      	movs	r2, #8
 8001552:	4619      	mov	r1, r3
 8001554:	6a38      	ldr	r0, [r7, #32]
 8001556:	f003 f829 	bl	80045ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001566:	441a      	add	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0210 	orr.w	r2, r2, #16
 800157a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 f978 	bl	8004876 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001590:	d16e      	bne.n	8001670 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f97e 	bl	800489c <USB_ReadDevAllOutEpInterrupt>
 80015a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015a2:	e062      	b.n	800166a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d057      	beq.n	800165e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 f9a3 	bl	8004904 <USB_ReadDevOutEPInterrupt>
 80015be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00c      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d6:	461a      	mov	r2, r3
 80015d8:	2301      	movs	r3, #1
 80015da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fd98 	bl	8002114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fa:	461a      	mov	r2, r3
 80015fc:	2308      	movs	r3, #8
 80015fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fe92 	bl	800232c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161e:	461a      	mov	r2, r3
 8001620:	2310      	movs	r3, #16
 8001622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800163a:	461a      	mov	r2, r3
 800163c:	2320      	movs	r3, #32
 800163e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	461a      	mov	r2, r3
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	d199      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f8fe 	bl	8004876 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001684:	f040 80c0 	bne.w	8001808 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f91f 	bl	80048d0 <USB_ReadDevAllInEpInterrupt>
 8001692:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001698:	e0b2      	b.n	8001800 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a7 	beq.w	80017f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f945 	bl	8004940 <USB_ReadDevInEPInterrupt>
 80016b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d057      	beq.n	8001772 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2201      	movs	r2, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69f9      	ldr	r1, [r7, #28]
 80016de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016e2:	4013      	ands	r3, r2
 80016e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f2:	461a      	mov	r2, r3
 80016f4:	2301      	movs	r3, #1
 80016f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d132      	bne.n	8001766 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3348      	adds	r3, #72	; 0x48
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4403      	add	r3, r0
 8001720:	3344      	adds	r3, #68	; 0x44
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4419      	add	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4403      	add	r3, r0
 8001734:	3348      	adds	r3, #72	; 0x48
 8001736:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <HAL_PCD_IRQHandler+0x31c>
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3350      	adds	r3, #80	; 0x50
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d108      	bne.n	8001766 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800175e:	461a      	mov	r2, r3
 8001760:	2101      	movs	r1, #1
 8001762:	f003 f94d 	bl	8004a00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f004 fe5e 	bl	800642e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001788:	461a      	mov	r2, r3
 800178a:	2308      	movs	r3, #8
 800178c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a4:	461a      	mov	r2, r3
 80017a6:	2310      	movs	r3, #16
 80017a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c0:	461a      	mov	r2, r3
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017dc:	461a      	mov	r2, r3
 80017de:	2302      	movs	r3, #2
 80017e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fc03 	bl	8001ffa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3301      	adds	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	2b00      	cmp	r3, #0
 8001804:	f47f af49 	bne.w	800169a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f832 	bl	8004876 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800181c:	d122      	bne.n	8001864 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fe0e 	bl	8002468 <HAL_PCDEx_LPM_Callback>
 800184c:	e002      	b.n	8001854 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f004 fe64 	bl	800651c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f804 	bl	8004876 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001878:	d112      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f004 fe20 	bl	80064d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800189e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 ffe6 	bl	8004876 <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b4:	f040 80c7 	bne.w	8001a46 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2110      	movs	r1, #16
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 f8b4 	bl	8003a40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	e056      	b.n	800198c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	461a      	mov	r2, r3
 80018ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001902:	0151      	lsls	r1, r2, #5
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	440a      	add	r2, r1
 8001908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800190c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001910:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	0151      	lsls	r1, r2, #5
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	440a      	add	r2, r1
 8001928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800192c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001930:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001944:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	0151      	lsls	r1, r2, #5
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	440a      	add	r2, r1
 800195c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	0151      	lsls	r1, r2, #5
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	440a      	add	r2, r1
 800197c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001984:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	3301      	adds	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001992:	429a      	cmp	r2, r3
 8001994:	d3a3      	bcc.n	80018de <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c2:	f043 030b 	orr.w	r3, r3, #11
 80019c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d8:	f043 030b 	orr.w	r3, r3, #11
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	e015      	b.n	8001a0c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f043 030b 	orr.w	r3, r3, #11
 8001a0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a30:	461a      	mov	r2, r3
 8001a32:	f002 ffe5 	bl	8004a00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ff13 	bl	8004876 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a5a:	d124      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 ffa9 	bl	80049b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 f849 	bl	8003b02 <USB_GetDevSpeed>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	f001 f92e 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8001a80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f001 fd86 	bl	800359c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f004 fcf4 	bl	800647e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fee3 	bl	8004876 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f004 fcd1 	bl	8006462 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f002 0208 	and.w	r2, r2, #8
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fece 	bl	8004876 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae4:	d10f      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f004 fd33 	bl	800655c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 feb3 	bl	8004876 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b1a:	d10f      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f004 fd06 	bl	8006538 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fe98 	bl	8004876 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d10a      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f004 fd14 	bl	8006580 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fe82 	bl	8004876 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d115      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f004 fd04 	bl	800659c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	e000      	b.n	8001ba8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ba6:	bf00      	nop
    }
  }
}
 8001ba8:	3734      	adds	r7, #52	; 0x34
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_SetAddress+0x1a>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e013      	b.n	8001bf0 <HAL_PCD_SetAddress+0x42>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fde0 	bl	80047a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	70fb      	strb	r3, [r7, #3]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	803b      	strh	r3, [r7, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da0f      	bge.n	8001c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3338      	adds	r3, #56	; 0x38
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	705a      	strb	r2, [r3, #1]
 8001c3c:	e00f      	b.n	8001c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c6a:	883a      	ldrh	r2, [r7, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	78ba      	ldrb	r2, [r7, #2]
 8001c74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	785b      	ldrb	r3, [r3, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c88:	78bb      	ldrb	r3, [r7, #2]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d102      	bne.n	8001c94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_EP_Open+0xaa>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e00e      	b.n	8001cc0 <HAL_PCD_EP_Open+0xc8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 ff4b 	bl	8003b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da0f      	bge.n	8001cfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3338      	adds	r3, #56	; 0x38
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	705a      	strb	r2, [r3, #1]
 8001cfa:	e00f      	b.n	8001d1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 020f 	and.w	r2, r3, #15
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_EP_Close+0x6e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <HAL_PCD_EP_Close+0x8c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 ff89 	bl	8003c5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	f002 fa64 	bl	800429c <USB_EP0StartXfer>
 8001dd4:	e008      	b.n	8001de8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	f002 f816 	bl	8003e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 020f 	and.w	r2, r3, #15
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	6979      	ldr	r1, [r7, #20]
 8001e64:	f002 fa1a 	bl	800429c <USB_EP0StartXfer>
 8001e68:	e008      	b.n	8001e7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	6979      	ldr	r1, [r7, #20]
 8001e78:	f001 ffcc 	bl	8003e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 020f 	and.w	r2, r3, #15
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d901      	bls.n	8001ea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e050      	b.n	8001f46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da0f      	bge.n	8001ecc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3338      	adds	r3, #56	; 0x38
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	705a      	strb	r2, [r3, #1]
 8001eca:	e00d      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_PCD_EP_SetStall+0x82>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e01e      	b.n	8001f46 <HAL_PCD_EP_SetStall+0xc0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fb71 	bl	80045fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	b2d9      	uxtb	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f36:	461a      	mov	r2, r3
 8001f38:	f002 fd62 	bl	8004a00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d901      	bls.n	8001f6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e042      	b.n	8001ff2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da0f      	bge.n	8001f94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	3338      	adds	r3, #56	; 0x38
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	705a      	strb	r2, [r3, #1]
 8001f92:	e00f      	b.n	8001fb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_ClrStall+0x86>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e00e      	b.n	8001ff2 <HAL_PCD_EP_ClrStall+0xa4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fb79 	bl	80046da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b08a      	sub	sp, #40	; 0x28
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3338      	adds	r3, #56	; 0x38
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d901      	bls.n	8002032 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06c      	b.n	800210c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d902      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3303      	adds	r3, #3
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002056:	e02b      	b.n	80020b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3303      	adds	r3, #3
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208c:	b2db      	uxtb	r3, r3
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f002 fa55 	bl	8004542 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d809      	bhi.n	80020da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d203      	bcs.n	80020da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1be      	bne.n	8002058 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d811      	bhi.n	800210a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	2201      	movs	r2, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	43db      	mvns	r3, r3
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002106:	4013      	ands	r3, r2
 8002108:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	333c      	adds	r3, #60	; 0x3c
 800212c:	3304      	adds	r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 80a0 	bne.w	800228c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a72      	ldr	r2, [pc, #456]	; (8002324 <PCD_EP_OutXfrComplete_int+0x210>)
 800215a:	4293      	cmp	r3, r2
 800215c:	f240 80dd 	bls.w	800231a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80d7 	beq.w	800231a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e0cb      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	2320      	movs	r3, #32
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e0bc      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80b7 	bne.w	800231a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <PCD_EP_OutXfrComplete_int+0x210>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d90f      	bls.n	80021d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d0:	6093      	str	r3, [r2, #8]
 80021d2:	e0a2      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	0159      	lsls	r1, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4403      	add	r3, r0
 800220a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800220e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4403      	add	r3, r0
 8002232:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4419      	add	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4403      	add	r3, r0
 8002248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800224c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d114      	bne.n	800227e <PCD_EP_OutXfrComplete_int+0x16a>
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002276:	461a      	mov	r2, r3
 8002278:	2101      	movs	r1, #1
 800227a:	f002 fbc1 	bl	8004a00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f004 f8b7 	bl	80063f8 <HAL_PCD_DataOutStageCallback>
 800228a:	e046      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <PCD_EP_OutXfrComplete_int+0x214>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d124      	bne.n	80022de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b0:	6093      	str	r3, [r2, #8]
 80022b2:	e032      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	2320      	movs	r3, #32
 80022ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f004 f88e 	bl	80063f8 <HAL_PCD_DataOutStageCallback>
 80022dc:	e01d      	b.n	800231a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d114      	bne.n	800230e <PCD_EP_OutXfrComplete_int+0x1fa>
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002306:	461a      	mov	r2, r3
 8002308:	2100      	movs	r1, #0
 800230a:	f002 fb79 	bl	8004a00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f004 f86f 	bl	80063f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	4f54300a 	.word	0x4f54300a
 8002328:	4f54310a 	.word	0x4f54310a

0800232c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	333c      	adds	r3, #60	; 0x3c
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90e      	bls.n	8002380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	461a      	mov	r2, r3
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 f827 	bl	80063d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d90c      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023a0:	461a      	mov	r2, r3
 80023a2:	2101      	movs	r1, #1
 80023a4:	f002 fb2c 	bl	8004a00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	4f54300a 	.word	0x4f54300a

080023b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	4613      	mov	r3, r2
 80023c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	0419      	lsls	r1, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
 80023e4:	e028      	b.n	8002438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4413      	add	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e00d      	b.n	8002416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	3340      	adds	r3, #64	; 0x40
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	3b01      	subs	r3, #1
 800241c:	429a      	cmp	r2, r3
 800241e:	d3ec      	bcc.n	80023fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002420:	883b      	ldrh	r3, [r7, #0]
 8002422:	0418      	lsls	r0, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3b01      	subs	r3, #1
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4302      	orrs	r2, r0
 8002430:	3340      	adds	r3, #64	; 0x40
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e25b      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	4ba3      	ldr	r3, [pc, #652]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4ba0      	ldr	r3, [pc, #640]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b9d      	ldr	r3, [pc, #628]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b99      	ldr	r3, [pc, #612]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e236      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b91      	ldr	r3, [pc, #580]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a90      	ldr	r2, [pc, #576]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a8a      	ldr	r2, [pc, #552]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a87      	ldr	r2, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a83      	ldr	r2, [pc, #524]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a80      	ldr	r2, [pc, #512]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fb1c 	bl	8000b74 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe fb18 	bl	8000b74 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1fb      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fb08 	bl	8000b74 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fb04 	bl	8000b74 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1e7      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1bb      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b56      	ldr	r3, [pc, #344]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4952      	ldr	r1, [pc, #328]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCC_OscConfig+0x2b0>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fabd 	bl	8000b74 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fab9 	bl	8000b74 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e19c      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4940      	ldr	r1, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_OscConfig+0x2b0>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fa9c 	bl	8000b74 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fa98 	bl	8000b74 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e17b      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d030      	beq.n	80026cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x2b4>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe fa7c 	bl	8000b74 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fa78 	bl	8000b74 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e15b      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e015      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x2b4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fa65 	bl	8000b74 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fe fa61 	bl	8000b74 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e144      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a0 	beq.w	800281a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a0e      	ldr	r2, [pc, #56]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_OscConfig+0x2b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d121      	bne.n	800275a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_OscConfig+0x2b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_RCC_OscConfig+0x2b8>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe fa27 	bl	8000b74 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e011      	b.n	800274e <HAL_RCC_OscConfig+0x2ce>
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	42470000 	.word	0x42470000
 8002734:	42470e80 	.word	0x42470e80
 8002738:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fa1a 	bl	8000b74 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0fd      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b81      	ldr	r3, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x4d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x2f0>
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a7c      	ldr	r2, [pc, #496]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	e01c      	b.n	80027aa <HAL_RCC_OscConfig+0x32a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x312>
 8002778:	4b77      	ldr	r3, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a76      	ldr	r2, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b74      	ldr	r3, [pc, #464]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a73      	ldr	r2, [pc, #460]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x32a>
 8002792:	4b71      	ldr	r3, [pc, #452]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a70      	ldr	r2, [pc, #448]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b6e      	ldr	r3, [pc, #440]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe f9df 	bl	8000b74 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe f9db 	bl	8000b74 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0bc      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	4b61      	ldr	r3, [pc, #388]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RCC_OscConfig+0x33a>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe f9c9 	bl	8000b74 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe f9c5 	bl	8000b74 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0a6      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b52      	ldr	r3, [pc, #328]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a51      	ldr	r2, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8092 	beq.w	8002948 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d05c      	beq.n	80028ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d141      	bne.n	80028bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <HAL_RCC_OscConfig+0x4dc>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe f999 	bl	8000b74 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe f995 	bl	8000b74 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e078      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4933      	ldr	r1, [pc, #204]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe f96e 	bl	8000b74 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe f96a 	bl	8000b74 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e04d      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x41c>
 80028ba:	e045      	b.n	8002948 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_RCC_OscConfig+0x4dc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe f957 	bl	8000b74 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe f953 	bl	8000b74 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e036      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x44a>
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e029      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	429a      	cmp	r2, r3
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d115      	bne.n	8002944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002924:	4293      	cmp	r3, r2
 8002926:	d10d      	bne.n	8002944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d106      	bne.n	8002944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40007000 	.word	0x40007000
 8002958:	40023800 	.word	0x40023800
 800295c:	42470060 	.word	0x42470060

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0cc      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4934      	ldr	r1, [pc, #208]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe f890 	bl	8000b74 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe f88c 	bl	8000b74 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20c      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	fa21 f303 	lsr.w	r3, r1, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fff0 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08006b58 	.word	0x08006b58
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d007      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x32>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d008      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x38>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80b4 	bne.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b5a:	60bb      	str	r3, [r7, #8]
       break;
 8002b5c:	e0b3      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b60:	60bb      	str	r3, [r7, #8]
      break;
 8002b62:	e0b0      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04a      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	f04f 0400 	mov.w	r4, #0
 8002b84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	ea03 0501 	and.w	r5, r3, r1
 8002b90:	ea04 0602 	and.w	r6, r4, r2
 8002b94:	4629      	mov	r1, r5
 8002b96:	4632      	mov	r2, r6
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	0154      	lsls	r4, r2, #5
 8002ba2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba6:	014b      	lsls	r3, r1, #5
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4622      	mov	r2, r4
 8002bac:	1b49      	subs	r1, r1, r5
 8002bae:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	0194      	lsls	r4, r2, #6
 8002bbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bc0:	018b      	lsls	r3, r1, #6
 8002bc2:	1a5b      	subs	r3, r3, r1
 8002bc4:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	00e2      	lsls	r2, r4, #3
 8002bd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd6:	00d9      	lsls	r1, r3, #3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	195b      	adds	r3, r3, r5
 8002bde:	eb44 0406 	adc.w	r4, r4, r6
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	0262      	lsls	r2, r4, #9
 8002bec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bf0:	0259      	lsls	r1, r3, #9
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f04f 0400 	mov.w	r4, #0
 8002c00:	461a      	mov	r2, r3
 8002c02:	4623      	mov	r3, r4
 8002c04:	f7fd faf2 	bl	80001ec <__aeabi_uldivmod>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e049      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	ea03 0501 	and.w	r5, r3, r1
 8002c26:	ea04 0602 	and.w	r6, r4, r2
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	0154      	lsls	r4, r2, #5
 8002c38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c3c:	014b      	lsls	r3, r1, #5
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4622      	mov	r2, r4
 8002c42:	1b49      	subs	r1, r1, r5
 8002c44:	eb62 0206 	sbc.w	r2, r2, r6
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f04f 0400 	mov.w	r4, #0
 8002c50:	0194      	lsls	r4, r2, #6
 8002c52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	1a5b      	subs	r3, r3, r1
 8002c5a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c6c:	00d9      	lsls	r1, r3, #3
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	195b      	adds	r3, r3, r5
 8002c74:	eb44 0406 	adc.w	r4, r4, r6
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	02a2      	lsls	r2, r4, #10
 8002c82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c86:	0299      	lsls	r1, r3, #10
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	4621      	mov	r1, r4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	461a      	mov	r2, r3
 8002c98:	4623      	mov	r3, r4
 8002c9a:	f7fd faa7 	bl	80001ec <__aeabi_uldivmod>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cc2:	60bb      	str	r3, [r7, #8]
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08006b68 	.word	0x08006b68

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	4601      	mov	r1, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08006b68 	.word	0x08006b68

08002d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e03f      	b.n	8002dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fda6 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f829 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e22:	f023 030c 	bic.w	r3, r3, #12
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4e:	f040 818b 	bne.w	8003168 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4ac1      	ldr	r2, [pc, #772]	; (800315c <UART_SetConfig+0x37c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d005      	beq.n	8002e68 <UART_SetConfig+0x88>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4abf      	ldr	r2, [pc, #764]	; (8003160 <UART_SetConfig+0x380>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 80bd 	bne.w	8002fe2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7ff ff58 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8002e6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	461d      	mov	r5, r3
 8002e72:	f04f 0600 	mov.w	r6, #0
 8002e76:	46a8      	mov	r8, r5
 8002e78:	46b1      	mov	r9, r6
 8002e7a:	eb18 0308 	adds.w	r3, r8, r8
 8002e7e:	eb49 0409 	adc.w	r4, r9, r9
 8002e82:	4698      	mov	r8, r3
 8002e84:	46a1      	mov	r9, r4
 8002e86:	eb18 0805 	adds.w	r8, r8, r5
 8002e8a:	eb49 0906 	adc.w	r9, r9, r6
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ea2:	4688      	mov	r8, r1
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	eb18 0005 	adds.w	r0, r8, r5
 8002eaa:	eb49 0106 	adc.w	r1, r9, r6
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	461d      	mov	r5, r3
 8002eb4:	f04f 0600 	mov.w	r6, #0
 8002eb8:	196b      	adds	r3, r5, r5
 8002eba:	eb46 0406 	adc.w	r4, r6, r6
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	f7fd f993 	bl	80001ec <__aeabi_uldivmod>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4ba5      	ldr	r3, [pc, #660]	; (8003164 <UART_SetConfig+0x384>)
 8002ece:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	461d      	mov	r5, r3
 8002edc:	f04f 0600 	mov.w	r6, #0
 8002ee0:	46a9      	mov	r9, r5
 8002ee2:	46b2      	mov	sl, r6
 8002ee4:	eb19 0309 	adds.w	r3, r9, r9
 8002ee8:	eb4a 040a 	adc.w	r4, sl, sl
 8002eec:	4699      	mov	r9, r3
 8002eee:	46a2      	mov	sl, r4
 8002ef0:	eb19 0905 	adds.w	r9, r9, r5
 8002ef4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f0c:	4689      	mov	r9, r1
 8002f0e:	4692      	mov	sl, r2
 8002f10:	eb19 0005 	adds.w	r0, r9, r5
 8002f14:	eb4a 0106 	adc.w	r1, sl, r6
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	f04f 0600 	mov.w	r6, #0
 8002f22:	196b      	adds	r3, r5, r5
 8002f24:	eb46 0406 	adc.w	r4, r6, r6
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	f7fd f95e 	bl	80001ec <__aeabi_uldivmod>
 8002f30:	4603      	mov	r3, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <UART_SetConfig+0x384>)
 8002f38:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	2164      	movs	r1, #100	; 0x64
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	3332      	adds	r3, #50	; 0x32
 8002f4a:	4a86      	ldr	r2, [pc, #536]	; (8003164 <UART_SetConfig+0x384>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f58:	4498      	add	r8, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	461d      	mov	r5, r3
 8002f5e:	f04f 0600 	mov.w	r6, #0
 8002f62:	46a9      	mov	r9, r5
 8002f64:	46b2      	mov	sl, r6
 8002f66:	eb19 0309 	adds.w	r3, r9, r9
 8002f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f6e:	4699      	mov	r9, r3
 8002f70:	46a2      	mov	sl, r4
 8002f72:	eb19 0905 	adds.w	r9, r9, r5
 8002f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f8e:	4689      	mov	r9, r1
 8002f90:	4692      	mov	sl, r2
 8002f92:	eb19 0005 	adds.w	r0, r9, r5
 8002f96:	eb4a 0106 	adc.w	r1, sl, r6
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	f04f 0600 	mov.w	r6, #0
 8002fa4:	196b      	adds	r3, r5, r5
 8002fa6:	eb46 0406 	adc.w	r4, r6, r6
 8002faa:	461a      	mov	r2, r3
 8002fac:	4623      	mov	r3, r4
 8002fae:	f7fd f91d 	bl	80001ec <__aeabi_uldivmod>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <UART_SetConfig+0x384>)
 8002fba:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2164      	movs	r1, #100	; 0x64
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <UART_SetConfig+0x384>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4442      	add	r2, r8
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e26f      	b.n	80034c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7ff fe87 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	461d      	mov	r5, r3
 8002fec:	f04f 0600 	mov.w	r6, #0
 8002ff0:	46a8      	mov	r8, r5
 8002ff2:	46b1      	mov	r9, r6
 8002ff4:	eb18 0308 	adds.w	r3, r8, r8
 8002ff8:	eb49 0409 	adc.w	r4, r9, r9
 8002ffc:	4698      	mov	r8, r3
 8002ffe:	46a1      	mov	r9, r4
 8003000:	eb18 0805 	adds.w	r8, r8, r5
 8003004:	eb49 0906 	adc.w	r9, r9, r6
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800301c:	4688      	mov	r8, r1
 800301e:	4691      	mov	r9, r2
 8003020:	eb18 0005 	adds.w	r0, r8, r5
 8003024:	eb49 0106 	adc.w	r1, r9, r6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	461d      	mov	r5, r3
 800302e:	f04f 0600 	mov.w	r6, #0
 8003032:	196b      	adds	r3, r5, r5
 8003034:	eb46 0406 	adc.w	r4, r6, r6
 8003038:	461a      	mov	r2, r3
 800303a:	4623      	mov	r3, r4
 800303c:	f7fd f8d6 	bl	80001ec <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <UART_SetConfig+0x384>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	461d      	mov	r5, r3
 8003056:	f04f 0600 	mov.w	r6, #0
 800305a:	46a9      	mov	r9, r5
 800305c:	46b2      	mov	sl, r6
 800305e:	eb19 0309 	adds.w	r3, r9, r9
 8003062:	eb4a 040a 	adc.w	r4, sl, sl
 8003066:	4699      	mov	r9, r3
 8003068:	46a2      	mov	sl, r4
 800306a:	eb19 0905 	adds.w	r9, r9, r5
 800306e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003086:	4689      	mov	r9, r1
 8003088:	4692      	mov	sl, r2
 800308a:	eb19 0005 	adds.w	r0, r9, r5
 800308e:	eb4a 0106 	adc.w	r1, sl, r6
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	461d      	mov	r5, r3
 8003098:	f04f 0600 	mov.w	r6, #0
 800309c:	196b      	adds	r3, r5, r5
 800309e:	eb46 0406 	adc.w	r4, r6, r6
 80030a2:	461a      	mov	r2, r3
 80030a4:	4623      	mov	r3, r4
 80030a6:	f7fd f8a1 	bl	80001ec <__aeabi_uldivmod>
 80030aa:	4603      	mov	r3, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <UART_SetConfig+0x384>)
 80030b2:	fba3 1302 	umull	r1, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2164      	movs	r1, #100	; 0x64
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	3332      	adds	r3, #50	; 0x32
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <UART_SetConfig+0x384>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030d2:	4498      	add	r8, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	461d      	mov	r5, r3
 80030d8:	f04f 0600 	mov.w	r6, #0
 80030dc:	46a9      	mov	r9, r5
 80030de:	46b2      	mov	sl, r6
 80030e0:	eb19 0309 	adds.w	r3, r9, r9
 80030e4:	eb4a 040a 	adc.w	r4, sl, sl
 80030e8:	4699      	mov	r9, r3
 80030ea:	46a2      	mov	sl, r4
 80030ec:	eb19 0905 	adds.w	r9, r9, r5
 80030f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003108:	4689      	mov	r9, r1
 800310a:	4692      	mov	sl, r2
 800310c:	eb19 0005 	adds.w	r0, r9, r5
 8003110:	eb4a 0106 	adc.w	r1, sl, r6
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	461d      	mov	r5, r3
 800311a:	f04f 0600 	mov.w	r6, #0
 800311e:	196b      	adds	r3, r5, r5
 8003120:	eb46 0406 	adc.w	r4, r6, r6
 8003124:	461a      	mov	r2, r3
 8003126:	4623      	mov	r3, r4
 8003128:	f7fd f860 	bl	80001ec <__aeabi_uldivmod>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
 8003130:	461a      	mov	r2, r3
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <UART_SetConfig+0x384>)
 8003134:	fba3 1302 	umull	r1, r3, r3, r2
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	2164      	movs	r1, #100	; 0x64
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	3332      	adds	r3, #50	; 0x32
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <UART_SetConfig+0x384>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4442      	add	r2, r8
 8003158:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800315a:	e1b2      	b.n	80034c2 <UART_SetConfig+0x6e2>
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4ad7      	ldr	r2, [pc, #860]	; (80034cc <UART_SetConfig+0x6ec>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d005      	beq.n	800317e <UART_SetConfig+0x39e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4ad6      	ldr	r2, [pc, #856]	; (80034d0 <UART_SetConfig+0x6f0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	f040 80d1 	bne.w	8003320 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800317e:	f7ff fdcd 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8003182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	469a      	mov	sl, r3
 8003188:	f04f 0b00 	mov.w	fp, #0
 800318c:	46d0      	mov	r8, sl
 800318e:	46d9      	mov	r9, fp
 8003190:	eb18 0308 	adds.w	r3, r8, r8
 8003194:	eb49 0409 	adc.w	r4, r9, r9
 8003198:	4698      	mov	r8, r3
 800319a:	46a1      	mov	r9, r4
 800319c:	eb18 080a 	adds.w	r8, r8, sl
 80031a0:	eb49 090b 	adc.w	r9, r9, fp
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031b8:	4688      	mov	r8, r1
 80031ba:	4691      	mov	r9, r2
 80031bc:	eb1a 0508 	adds.w	r5, sl, r8
 80031c0:	eb4b 0609 	adc.w	r6, fp, r9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	0094      	lsls	r4, r2, #2
 80031d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031dc:	008b      	lsls	r3, r1, #2
 80031de:	461a      	mov	r2, r3
 80031e0:	4623      	mov	r3, r4
 80031e2:	4628      	mov	r0, r5
 80031e4:	4631      	mov	r1, r6
 80031e6:	f7fd f801 	bl	80001ec <__aeabi_uldivmod>
 80031ea:	4603      	mov	r3, r0
 80031ec:	460c      	mov	r4, r1
 80031ee:	461a      	mov	r2, r3
 80031f0:	4bb8      	ldr	r3, [pc, #736]	; (80034d4 <UART_SetConfig+0x6f4>)
 80031f2:	fba3 2302 	umull	r2, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	469b      	mov	fp, r3
 8003200:	f04f 0c00 	mov.w	ip, #0
 8003204:	46d9      	mov	r9, fp
 8003206:	46e2      	mov	sl, ip
 8003208:	eb19 0309 	adds.w	r3, r9, r9
 800320c:	eb4a 040a 	adc.w	r4, sl, sl
 8003210:	4699      	mov	r9, r3
 8003212:	46a2      	mov	sl, r4
 8003214:	eb19 090b 	adds.w	r9, r9, fp
 8003218:	eb4a 0a0c 	adc.w	sl, sl, ip
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800322c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003230:	4689      	mov	r9, r1
 8003232:	4692      	mov	sl, r2
 8003234:	eb1b 0509 	adds.w	r5, fp, r9
 8003238:	eb4c 060a 	adc.w	r6, ip, sl
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4619      	mov	r1, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	0094      	lsls	r4, r2, #2
 8003250:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	461a      	mov	r2, r3
 8003258:	4623      	mov	r3, r4
 800325a:	4628      	mov	r0, r5
 800325c:	4631      	mov	r1, r6
 800325e:	f7fc ffc5 	bl	80001ec <__aeabi_uldivmod>
 8003262:	4603      	mov	r3, r0
 8003264:	460c      	mov	r4, r1
 8003266:	461a      	mov	r2, r3
 8003268:	4b9a      	ldr	r3, [pc, #616]	; (80034d4 <UART_SetConfig+0x6f4>)
 800326a:	fba3 1302 	umull	r1, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2164      	movs	r1, #100	; 0x64
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a95      	ldr	r2, [pc, #596]	; (80034d4 <UART_SetConfig+0x6f4>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	4498      	add	r8, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	469b      	mov	fp, r3
 800328e:	f04f 0c00 	mov.w	ip, #0
 8003292:	46d9      	mov	r9, fp
 8003294:	46e2      	mov	sl, ip
 8003296:	eb19 0309 	adds.w	r3, r9, r9
 800329a:	eb4a 040a 	adc.w	r4, sl, sl
 800329e:	4699      	mov	r9, r3
 80032a0:	46a2      	mov	sl, r4
 80032a2:	eb19 090b 	adds.w	r9, r9, fp
 80032a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032be:	4689      	mov	r9, r1
 80032c0:	4692      	mov	sl, r2
 80032c2:	eb1b 0509 	adds.w	r5, fp, r9
 80032c6:	eb4c 060a 	adc.w	r6, ip, sl
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	0094      	lsls	r4, r2, #2
 80032de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032e2:	008b      	lsls	r3, r1, #2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4623      	mov	r3, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	4631      	mov	r1, r6
 80032ec:	f7fc ff7e 	bl	80001ec <__aeabi_uldivmod>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b77      	ldr	r3, [pc, #476]	; (80034d4 <UART_SetConfig+0x6f4>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2164      	movs	r1, #100	; 0x64
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	3332      	adds	r3, #50	; 0x32
 800330a:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <UART_SetConfig+0x6f4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4442      	add	r2, r8
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	e0d0      	b.n	80034c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7ff fce8 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003324:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	469a      	mov	sl, r3
 800332a:	f04f 0b00 	mov.w	fp, #0
 800332e:	46d0      	mov	r8, sl
 8003330:	46d9      	mov	r9, fp
 8003332:	eb18 0308 	adds.w	r3, r8, r8
 8003336:	eb49 0409 	adc.w	r4, r9, r9
 800333a:	4698      	mov	r8, r3
 800333c:	46a1      	mov	r9, r4
 800333e:	eb18 080a 	adds.w	r8, r8, sl
 8003342:	eb49 090b 	adc.w	r9, r9, fp
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003352:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003356:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800335a:	4688      	mov	r8, r1
 800335c:	4691      	mov	r9, r2
 800335e:	eb1a 0508 	adds.w	r5, sl, r8
 8003362:	eb4b 0609 	adc.w	r6, fp, r9
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4619      	mov	r1, r3
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0094      	lsls	r4, r2, #2
 800337a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800337e:	008b      	lsls	r3, r1, #2
 8003380:	461a      	mov	r2, r3
 8003382:	4623      	mov	r3, r4
 8003384:	4628      	mov	r0, r5
 8003386:	4631      	mov	r1, r6
 8003388:	f7fc ff30 	bl	80001ec <__aeabi_uldivmod>
 800338c:	4603      	mov	r3, r0
 800338e:	460c      	mov	r4, r1
 8003390:	461a      	mov	r2, r3
 8003392:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <UART_SetConfig+0x6f4>)
 8003394:	fba3 2302 	umull	r2, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	469b      	mov	fp, r3
 80033a2:	f04f 0c00 	mov.w	ip, #0
 80033a6:	46d9      	mov	r9, fp
 80033a8:	46e2      	mov	sl, ip
 80033aa:	eb19 0309 	adds.w	r3, r9, r9
 80033ae:	eb4a 040a 	adc.w	r4, sl, sl
 80033b2:	4699      	mov	r9, r3
 80033b4:	46a2      	mov	sl, r4
 80033b6:	eb19 090b 	adds.w	r9, r9, fp
 80033ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d2:	4689      	mov	r9, r1
 80033d4:	4692      	mov	sl, r2
 80033d6:	eb1b 0509 	adds.w	r5, fp, r9
 80033da:	eb4c 060a 	adc.w	r6, ip, sl
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	0094      	lsls	r4, r2, #2
 80033f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f6:	008b      	lsls	r3, r1, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	4631      	mov	r1, r6
 8003400:	f7fc fef4 	bl	80001ec <__aeabi_uldivmod>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	461a      	mov	r2, r3
 800340a:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <UART_SetConfig+0x6f4>)
 800340c:	fba3 1302 	umull	r1, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2164      	movs	r1, #100	; 0x64
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <UART_SetConfig+0x6f4>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	4498      	add	r8, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	469b      	mov	fp, r3
 8003430:	f04f 0c00 	mov.w	ip, #0
 8003434:	46d9      	mov	r9, fp
 8003436:	46e2      	mov	sl, ip
 8003438:	eb19 0309 	adds.w	r3, r9, r9
 800343c:	eb4a 040a 	adc.w	r4, sl, sl
 8003440:	4699      	mov	r9, r3
 8003442:	46a2      	mov	sl, r4
 8003444:	eb19 090b 	adds.w	r9, r9, fp
 8003448:	eb4a 0a0c 	adc.w	sl, sl, ip
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800345c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003460:	4689      	mov	r9, r1
 8003462:	4692      	mov	sl, r2
 8003464:	eb1b 0509 	adds.w	r5, fp, r9
 8003468:	eb4c 060a 	adc.w	r6, ip, sl
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	0094      	lsls	r4, r2, #2
 8003480:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003484:	008b      	lsls	r3, r1, #2
 8003486:	461a      	mov	r2, r3
 8003488:	4623      	mov	r3, r4
 800348a:	4628      	mov	r0, r5
 800348c:	4631      	mov	r1, r6
 800348e:	f7fc fead 	bl	80001ec <__aeabi_uldivmod>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	461a      	mov	r2, r3
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <UART_SetConfig+0x6f4>)
 800349a:	fba3 1302 	umull	r1, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2164      	movs	r1, #100	; 0x64
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <UART_SetConfig+0x6f4>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4442      	add	r2, r8
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	e7ff      	b.n	80034c2 <UART_SetConfig+0x6e2>
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	40011000 	.word	0x40011000
 80034d0:	40011400 	.word	0x40011400
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d8:	b084      	sub	sp, #16
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	f107 001c 	add.w	r0, r7, #28
 80034e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d122      	bne.n	8003536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f001 fac6 	bl	8004abc <USB_CoreReset>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e01a      	b.n	800356c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 faba 	bl	8004abc <USB_CoreReset>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
 800355e:	e005      	b.n	800356c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10b      	bne.n	800358a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f043 0206 	orr.w	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003596:	b004      	add	sp, #16
 8003598:	4770      	bx	lr
	...

0800359c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d165      	bne.n	800367c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <USB_SetTurnaroundTime+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d906      	bls.n	80035c6 <USB_SetTurnaroundTime+0x2a>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <USB_SetTurnaroundTime+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d802      	bhi.n	80035c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035c0:	230f      	movs	r3, #15
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e062      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a3c      	ldr	r2, [pc, #240]	; (80036bc <USB_SetTurnaroundTime+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d906      	bls.n	80035dc <USB_SetTurnaroundTime+0x40>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a3b      	ldr	r2, [pc, #236]	; (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d802      	bhi.n	80035dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035d6:	230e      	movs	r3, #14
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e057      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a38      	ldr	r2, [pc, #224]	; (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d906      	bls.n	80035f2 <USB_SetTurnaroundTime+0x56>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a37      	ldr	r2, [pc, #220]	; (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d802      	bhi.n	80035f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035ec:	230d      	movs	r3, #13
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e04c      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d906      	bls.n	8003608 <USB_SetTurnaroundTime+0x6c>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a32      	ldr	r2, [pc, #200]	; (80036c8 <USB_SetTurnaroundTime+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003602:	230c      	movs	r3, #12
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e041      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <USB_SetTurnaroundTime+0x12c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d906      	bls.n	800361e <USB_SetTurnaroundTime+0x82>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <USB_SetTurnaroundTime+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d802      	bhi.n	800361e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003618:	230b      	movs	r3, #11
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e036      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <USB_SetTurnaroundTime+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d906      	bls.n	8003634 <USB_SetTurnaroundTime+0x98>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <USB_SetTurnaroundTime+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800362e:	230a      	movs	r3, #10
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e02b      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <USB_SetTurnaroundTime+0x134>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d906      	bls.n	800364a <USB_SetTurnaroundTime+0xae>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <USB_SetTurnaroundTime+0x138>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d802      	bhi.n	800364a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003644:	2309      	movs	r3, #9
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e020      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <USB_SetTurnaroundTime+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d906      	bls.n	8003660 <USB_SetTurnaroundTime+0xc4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800365a:	2308      	movs	r3, #8
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e015      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d906      	bls.n	8003676 <USB_SetTurnaroundTime+0xda>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <USB_SetTurnaroundTime+0x140>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d802      	bhi.n	8003676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003670:	2307      	movs	r3, #7
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e00a      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003676:	2306      	movs	r3, #6
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e007      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003682:	2309      	movs	r3, #9
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e001      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003688:	2309      	movs	r3, #9
 800368a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	00d8acbf 	.word	0x00d8acbf
 80036bc:	00e4e1bf 	.word	0x00e4e1bf
 80036c0:	00f423ff 	.word	0x00f423ff
 80036c4:	0106737f 	.word	0x0106737f
 80036c8:	011a499f 	.word	0x011a499f
 80036cc:	01312cff 	.word	0x01312cff
 80036d0:	014ca43f 	.word	0x014ca43f
 80036d4:	016e35ff 	.word	0x016e35ff
 80036d8:	01a6ab1f 	.word	0x01a6ab1f
 80036dc:	01e847ff 	.word	0x01e847ff

080036e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d106      	bne.n	8003750 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	e00b      	b.n	8003768 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	e001      	b.n	8003768 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e003      	b.n	8003770 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003768:	2032      	movs	r0, #50	; 0x32
 800376a:	f7fd fa0f 	bl	8000b8c <HAL_Delay>

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003778:	b084      	sub	sp, #16
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e009      	b.n	80037ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3340      	adds	r3, #64	; 0x40
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b0e      	cmp	r3, #14
 80037b0:	d9f2      	bls.n	8003798 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11c      	bne.n	80037f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
 80037f0:	e00b      	b.n	800380a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003810:	461a      	mov	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	4619      	mov	r1, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003824:	461a      	mov	r2, r3
 8003826:	680b      	ldr	r3, [r1, #0]
 8003828:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10c      	bne.n	800384a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f949 	bl	8003ad0 <USB_SetDevSpeed>
 800383e:	e008      	b.n	8003852 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003840:	2101      	movs	r1, #1
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f944 	bl	8003ad0 <USB_SetDevSpeed>
 8003848:	e003      	b.n	8003852 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800384a:	2103      	movs	r1, #3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f93f 	bl	8003ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003852:	2110      	movs	r1, #16
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8f3 	bl	8003a40 <USB_FlushTxFifo>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f911 	bl	8003a8c <USB_FlushRxFifo>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	461a      	mov	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	461a      	mov	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e043      	b.n	8003926 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b4:	d118      	bne.n	80038e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c8:	461a      	mov	r2, r3
 80038ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e013      	b.n	80038fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	461a      	mov	r2, r3
 80038e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e008      	b.n	80038fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	461a      	mov	r2, r3
 8003908:	2300      	movs	r3, #0
 800390a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	461a      	mov	r2, r3
 800391a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800391e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3301      	adds	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3b7      	bcc.n	800389e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e043      	b.n	80039bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800394a:	d118      	bne.n	800397e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e013      	b.n	8003990 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e008      	b.n	8003990 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	2300      	movs	r3, #0
 800398e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	2300      	movs	r3, #0
 80039a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3301      	adds	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d3b7      	bcc.n	8003934 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f043 0210 	orr.w	r2, r3, #16
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <USB_DevInit+0x2c4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a38:	b004      	add	sp, #16
 8003a3a:	4770      	bx	lr
 8003a3c:	803c3800 	.word	0x803c3800

08003a40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <USB_FlushTxFifo+0x48>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e006      	b.n	8003a7a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d0f0      	beq.n	8003a5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	00030d40 	.word	0x00030d40

08003a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <USB_FlushRxFifo+0x40>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e006      	b.n	8003abe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d0f0      	beq.n	8003a9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	00030d40 	.word	0x00030d40

08003ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	e00a      	b.n	8003b3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d002      	beq.n	8003b34 <USB_GetDevSpeed+0x32>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d102      	bne.n	8003b3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b34:	2302      	movs	r3, #2
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	e001      	b.n	8003b3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b3a:	230f      	movs	r3, #15
 8003b3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d13a      	bne.n	8003bde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d155      	bne.n	8003c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	059b      	lsls	r3, r3, #22
 8003bc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e036      	b.n	8003c4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11a      	bne.n	8003c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	78db      	ldrb	r3, [r3, #3]
 8003c30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c32:	430b      	orrs	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d161      	bne.n	8003d3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8e:	d11f      	bne.n	8003cd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	0159      	lsls	r1, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	4619      	mov	r1, r3
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <USB_DeactivateEndpoint+0x1b0>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e060      	b.n	8003dfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d52:	d11f      	bne.n	8003d94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	43db      	mvns	r3, r3
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db4:	4013      	ands	r3, r2
 8003db6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0159      	lsls	r1, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	4619      	mov	r1, r3
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <USB_DeactivateEndpoint+0x1b4>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	ec337800 	.word	0xec337800
 8003e10:	eff37800 	.word	0xeff37800

08003e14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 815c 	bne.w	80040ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d132      	bne.n	8003ea4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9c:	0cdb      	lsrs	r3, r3, #19
 8003e9e:	04db      	lsls	r3, r3, #19
 8003ea0:	6113      	str	r3, [r2, #16]
 8003ea2:	e074      	b.n	8003f8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebe:	0cdb      	lsrs	r3, r3, #19
 8003ec0:	04db      	lsls	r3, r3, #19
 8003ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6959      	ldr	r1, [r3, #20]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	440b      	add	r3, r1
 8003f00:	1e59      	subs	r1, r3, #1
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0a:	04d9      	lsls	r1, r3, #19
 8003f0c:	4b9d      	ldr	r3, [pc, #628]	; (8004184 <USB_EPStartXfer+0x370>)
 8003f0e:	400b      	ands	r3, r1
 8003f10:	69b9      	ldr	r1, [r7, #24]
 8003f12:	0148      	lsls	r0, r1, #5
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	4401      	add	r1, r0
 8003f18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	0148      	lsls	r0, r1, #5
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	4401      	add	r1, r0
 8003f3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	78db      	ldrb	r3, [r3, #3]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d11f      	bne.n	8003f8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d14b      	bne.n	800402c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	78db      	ldrb	r3, [r3, #3]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d128      	bne.n	800400a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e00f      	b.n	800400a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004008:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e12f      	b.n	800428c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800404a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d015      	beq.n	8004080 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8117 	beq.w	800428c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	2101      	movs	r1, #1
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800407a:	4313      	orrs	r3, r2
 800407c:	634b      	str	r3, [r1, #52]	; 0x34
 800407e:	e105      	b.n	800428c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e00f      	b.n	80040d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	b298      	uxth	r0, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4603      	mov	r3, r0
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa2b 	bl	8004542 <USB_WritePacket>
 80040ec:	e0ce      	b.n	800428c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004108:	0cdb      	lsrs	r3, r3, #19
 800410a:	04db      	lsls	r3, r3, #19
 800410c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	440a      	add	r2, r1
 8004124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800412c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004130:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d126      	bne.n	8004188 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	0148      	lsls	r0, r1, #5
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	4401      	add	r1, r0
 8004158:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
 8004180:	e036      	b.n	80041f0 <USB_EPStartXfer+0x3dc>
 8004182:	bf00      	nop
 8004184:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4413      	add	r3, r2
 8004192:	1e5a      	subs	r2, r3, #1
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	8afb      	ldrh	r3, [r7, #22]
 80041ae:	04d9      	lsls	r1, r3, #19
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <USB_EPStartXfer+0x484>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	0148      	lsls	r0, r1, #5
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	4401      	add	r1, r0
 80041bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	8af9      	ldrh	r1, [r7, #22]
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	0148      	lsls	r0, r1, #5
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	4401      	add	r1, r0
 80041e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10d      	bne.n	8004212 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	460a      	mov	r2, r1
 8004210:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	78db      	ldrb	r3, [r3, #3]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d128      	bne.n	800426c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00f      	b.n	800426c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800428a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	1ff80000 	.word	0x1ff80000

0800429c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 80cd 	bne.w	8004458 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d132      	bne.n	800432c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004324:	0cdb      	lsrs	r3, r3, #19
 8004326:	04db      	lsls	r3, r3, #19
 8004328:	6113      	str	r3, [r2, #16]
 800432a:	e04e      	b.n	80043ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004346:	0cdb      	lsrs	r3, r3, #19
 8004348:	04db      	lsls	r3, r3, #19
 800434a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800436a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800436e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d903      	bls.n	8004384 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	6939      	ldr	r1, [r7, #16]
 80043bc:	0148      	lsls	r0, r1, #5
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	4401      	add	r1, r0
 80043c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d11e      	bne.n	800440e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e092      	b.n	8004534 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800442c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d07e      	beq.n	8004534 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004452:	4313      	orrs	r3, r2
 8004454:	634b      	str	r3, [r1, #52]	; 0x34
 8004456:	e06d      	b.n	8004534 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004472:	0cdb      	lsrs	r3, r3, #19
 8004474:	04db      	lsls	r3, r3, #19
 8004476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800449a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e2:	6939      	ldr	r1, [r7, #16]
 80044e4:	0148      	lsls	r0, r1, #5
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	4401      	add	r1, r0
 80044ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044ee:	4313      	orrs	r3, r2
 80044f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10d      	bne.n	8004514 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	460a      	mov	r2, r1
 8004512:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004542:	b480      	push	{r7}
 8004544:	b089      	sub	sp, #36	; 0x24
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	4611      	mov	r1, r2
 800454e:	461a      	mov	r2, r3
 8004550:	460b      	mov	r3, r1
 8004552:	71fb      	strb	r3, [r7, #7]
 8004554:	4613      	mov	r3, r2
 8004556:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004560:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11a      	bne.n	800459e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004568:	88bb      	ldrh	r3, [r7, #4]
 800456a:	3303      	adds	r3, #3
 800456c:	089b      	lsrs	r3, r3, #2
 800456e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e00f      	b.n	8004596 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	031a      	lsls	r2, r3, #12
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4413      	add	r3, r2
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	461a      	mov	r2, r3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6013      	str	r3, [r2, #0]
      pSrc++;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3304      	adds	r3, #4
 800458e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3301      	adds	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3eb      	bcc.n	8004576 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3724      	adds	r7, #36	; 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	3303      	adds	r3, #3
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e00b      	b.n	80045e8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	601a      	str	r2, [r3, #0]
    pDest++;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	3304      	adds	r3, #4
 80045e0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3ef      	bcc.n	80045d0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80045f0:	69fb      	ldr	r3, [r7, #28]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d12c      	bne.n	8004674 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db12      	blt.n	8004652 <USB_EPSetStall+0x54>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00f      	beq.n	8004652 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004650:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e02b      	b.n	80046cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db12      	blt.n	80046ac <USB_EPSetStall+0xae>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d128      	bne.n	8004748 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	78db      	ldrb	r3, [r3, #3]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d003      	beq.n	8004726 <USB_EPClearStall+0x4c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	78db      	ldrb	r3, [r3, #3]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d138      	bne.n	8004798 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e027      	b.n	8004798 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004766:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d003      	beq.n	8004778 <USB_EPClearStall+0x9e>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	78db      	ldrb	r3, [r3, #3]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10f      	bne.n	8004798 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004820:	f023 0302 	bic.w	r3, r3, #2
 8004824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4013      	ands	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	0c1b      	lsrs	r3, r3, #16
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	b29b      	uxth	r3, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004932:	68bb      	ldr	r3, [r7, #8]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	b2db      	uxtb	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800498e:	68bb      	ldr	r3, [r7, #8]
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0301 	and.w	r3, r3, #1
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	333c      	adds	r3, #60	; 0x3c
 8004a16:	3304      	adds	r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <USB_EP0_OutStart+0xb8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d90a      	bls.n	8004a3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a34:	d101      	bne.n	8004a3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e037      	b.n	8004aaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	461a      	mov	r2, r3
 8004a42:	2300      	movs	r3, #0
 8004a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f043 0318 	orr.w	r3, r3, #24
 8004a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10f      	bne.n	8004aa8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	461a      	mov	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	4f54300a 	.word	0x4f54300a

08004abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <USB_CoreReset+0x64>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e01b      	b.n	8004b12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	daf2      	bge.n	8004ac8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <USB_CoreReset+0x64>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e006      	b.n	8004b12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d0f0      	beq.n	8004af2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	00030d40 	.word	0x00030d40

08004b24 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b30:	2010      	movs	r0, #16
 8004b32:	f001 ff0f 	bl	8006954 <malloc>
 8004b36:	4603      	mov	r3, r0
 8004b38:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e01b      	b.n	8004b84 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7c1b      	ldrb	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2207      	movs	r2, #7
 8004b60:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b62:	e002      	b.n	8004b6a <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	220a      	movs	r2, #10
 8004b68:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	2181      	movs	r1, #129	; 0x81
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 fd88 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b98:	2181      	movs	r1, #129	; 0x81
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 fd99 	bl	80066d2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fed1 	bl	8006964 <free>
    pdev->pClassData = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004be4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d045      	beq.n	8004c86 <USBD_HID_Setup+0xb2>
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	f040 80d4 	bne.w	8004da8 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	3b02      	subs	r3, #2
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d835      	bhi.n	8004c76 <USBD_HID_Setup+0xa2>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <USBD_HID_Setup+0x3c>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c67 	.word	0x08004c67
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c77 	.word	0x08004c77
 8004c1c:	08004c77 	.word	0x08004c77
 8004c20:	08004c77 	.word	0x08004c77
 8004c24:	08004c77 	.word	0x08004c77
 8004c28:	08004c77 	.word	0x08004c77
 8004c2c:	08004c77 	.word	0x08004c77
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c39 	.word	0x08004c39
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	885b      	ldrh	r3, [r3, #2]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]
      break;
 8004c44:	e01e      	b.n	8004c84 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 f9c8 	bl	8005fe2 <USBD_CtlSendData>
      break;
 8004c52:	e017      	b.n	8004c84 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	885b      	ldrh	r3, [r3, #2]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
      break;
 8004c64:	e00e      	b.n	8004c84 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 f9b7 	bl	8005fe2 <USBD_CtlSendData>
      break;
 8004c74:	e006      	b.n	8004c84 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 f941 	bl	8005f00 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
      break;
 8004c82:	bf00      	nop
    }
    break;
 8004c84:	e097      	b.n	8004db6 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b0b      	cmp	r3, #11
 8004c8c:	f200 8083 	bhi.w	8004d96 <USBD_HID_Setup+0x1c2>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <USBD_HID_Setup+0xc4>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004cc9 	.word	0x08004cc9
 8004c9c:	08004da5 	.word	0x08004da5
 8004ca0:	08004d97 	.word	0x08004d97
 8004ca4:	08004d97 	.word	0x08004d97
 8004ca8:	08004d97 	.word	0x08004d97
 8004cac:	08004d97 	.word	0x08004d97
 8004cb0:	08004cf1 	.word	0x08004cf1
 8004cb4:	08004d97 	.word	0x08004d97
 8004cb8:	08004d97 	.word	0x08004d97
 8004cbc:	08004d97 	.word	0x08004d97
 8004cc0:	08004d49 	.word	0x08004d49
 8004cc4:	08004d71 	.word	0x08004d71
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cd2:	f107 030a 	add.w	r3, r7, #10
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 f981 	bl	8005fe2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ce0:	e061      	b.n	8004da6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 f90b 	bl	8005f00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cea:	2303      	movs	r3, #3
 8004cec:	75fb      	strb	r3, [r7, #23]
      break;
 8004cee:	e05a      	b.n	8004da6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	885b      	ldrh	r3, [r3, #2]
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b22      	cmp	r3, #34	; 0x22
 8004cfa:	d108      	bne.n	8004d0e <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	88db      	ldrh	r3, [r3, #6]
 8004d00:	2b4a      	cmp	r3, #74	; 0x4a
 8004d02:	bf28      	it	cs
 8004d04:	234a      	movcs	r3, #74	; 0x4a
 8004d06:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004d08:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <USBD_HID_Setup+0x1ec>)
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e015      	b.n	8004d3a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	885b      	ldrh	r3, [r3, #2]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d108      	bne.n	8004d2c <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <USBD_HID_Setup+0x1f0>)
 8004d1c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	88db      	ldrh	r3, [r3, #6]
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	bf28      	it	cs
 8004d26:	2309      	movcs	r3, #9
 8004d28:	82bb      	strh	r3, [r7, #20]
 8004d2a:	e006      	b.n	8004d3a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 f8e6 	bl	8005f00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d34:	2303      	movs	r3, #3
 8004d36:	75fb      	strb	r3, [r7, #23]
        break;
 8004d38:	e035      	b.n	8004da6 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d3a:	8abb      	ldrh	r3, [r7, #20]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 f94e 	bl	8005fe2 <USBD_CtlSendData>
      break;
 8004d46:	e02e      	b.n	8004da6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3308      	adds	r3, #8
 8004d56:	2201      	movs	r2, #1
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f941 	bl	8005fe2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d60:	e021      	b.n	8004da6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f001 f8cb 	bl	8005f00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6e:	e01a      	b.n	8004da6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d106      	bne.n	8004d88 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	885b      	ldrh	r3, [r3, #2]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d86:	e00e      	b.n	8004da6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f8b8 	bl	8005f00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d90:	2303      	movs	r3, #3
 8004d92:	75fb      	strb	r3, [r7, #23]
      break;
 8004d94:	e007      	b.n	8004da6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 f8b1 	bl	8005f00 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	75fb      	strb	r3, [r7, #23]
      break;
 8004da2:	e000      	b.n	8004da6 <USBD_HID_Setup+0x1d2>
      break;
 8004da4:	bf00      	nop
    }
    break;
 8004da6:	e006      	b.n	8004db6 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f001 f8a8 	bl	8005f00 <USBD_CtlError>
    ret = USBD_FAIL;
 8004db0:	2303      	movs	r3, #3
 8004db2:	75fb      	strb	r3, [r7, #23]
    break;
 8004db4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200000c8 	.word	0x200000c8
 8004dc4:	200000b0 	.word	0x200000b0

08004dc8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ddc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d10c      	bne.n	8004e02 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	7b1b      	ldrb	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d108      	bne.n	8004e02 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2201      	movs	r2, #1
 8004df4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	2181      	movs	r1, #129	; 0x81
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f001 fd10 	bl	8006822 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7c1b      	ldrb	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e001      	b.n	8004e26 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8004e22:	230a      	movs	r3, #10
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2222      	movs	r2, #34	; 0x22
 8004e40:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000044 	.word	0x20000044

08004e54 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2222      	movs	r2, #34	; 0x22
 8004e60:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004e62:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000068 	.word	0x20000068

08004e74 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2222      	movs	r2, #34	; 0x22
 8004e80:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004e82:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	2000008c 	.word	0x2000008c

08004e94 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	220a      	movs	r2, #10
 8004ec4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004ec6:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	200000bc 	.word	0x200000bc

08004ed8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e025      	b.n	8004f3c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	79fa      	ldrb	r2, [r7, #7]
 8004f2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f001 fb41 	bl	80065b8 <USBD_LL_Init>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e010      	b.n	8004f7e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	f107 020e 	add.w	r2, r7, #14
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
 8004f74:	4602      	mov	r2, r0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fb5e 	bl	8006650 <USBD_LL_Start>
 8004f94:	4603      	mov	r3, r0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	4611      	mov	r1, r2
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
  }

  return USBD_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 ff2c 	bl	8005e8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2b01      	cmp	r3, #1
 8005056:	d00e      	beq.n	8005076 <USBD_LL_SetupStage+0x5a>
 8005058:	2b01      	cmp	r3, #1
 800505a:	d302      	bcc.n	8005062 <USBD_LL_SetupStage+0x46>
 800505c:	2b02      	cmp	r3, #2
 800505e:	d014      	beq.n	800508a <USBD_LL_SetupStage+0x6e>
 8005060:	e01d      	b.n	800509e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa18 	bl	80054a0 <USBD_StdDevReq>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e020      	b.n	80050b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa7c 	bl	800557c <USBD_StdItfReq>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e016      	b.n	80050b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fab8 	bl	8005608 <USBD_StdEPReq>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e00c      	b.n	80050b8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 fb2f 	bl	8006710 <USBD_LL_StallEP>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
      break;
 80050b6:	bf00      	nop
  }

  return ret;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	460b      	mov	r3, r1
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d137      	bne.n	8005146 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d14a      	bne.n	800517e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d913      	bls.n	800511c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	1ad2      	subs	r2, r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4293      	cmp	r3, r2
 800510c:	bf28      	it	cs
 800510e:	4613      	movcs	r3, r2
 8005110:	461a      	mov	r2, r3
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 ff90 	bl	800603a <USBD_CtlContinueRx>
 800511a:	e030      	b.n	800517e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800512e:	2b03      	cmp	r3, #3
 8005130:	d105      	bne.n	800513e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 ff8c 	bl	800605c <USBD_CtlSendStatus>
 8005144:	e01b      	b.n	800517e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005158:	2b03      	cmp	r3, #3
 800515a:	d10e      	bne.n	800517a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	7afa      	ldrb	r2, [r7, #11]
 8005166:	4611      	mov	r1, r2
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	4798      	blx	r3
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	e002      	b.n	8005180 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800517a:	2303      	movs	r3, #3
 800517c:	e000      	b.n	8005180 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	460b      	mov	r3, r1
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d16a      	bne.n	8005272 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3314      	adds	r3, #20
 80051a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d155      	bne.n	8005258 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d914      	bls.n	80051e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 ff22 	bl	8006018 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051d4:	2300      	movs	r3, #0
 80051d6:	2200      	movs	r2, #0
 80051d8:	2100      	movs	r1, #0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f001 fb42 	bl	8006864 <USBD_LL_PrepareReceive>
 80051e0:	e03a      	b.n	8005258 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d11c      	bne.n	8005228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d316      	bcc.n	8005228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005204:	429a      	cmp	r2, r3
 8005206:	d20f      	bcs.n	8005228 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 ff03 	bl	8006018 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800521a:	2300      	movs	r3, #0
 800521c:	2200      	movs	r2, #0
 800521e:	2100      	movs	r1, #0
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f001 fb1f 	bl	8006864 <USBD_LL_PrepareReceive>
 8005226:	e017      	b.n	8005258 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800523a:	2b03      	cmp	r3, #3
 800523c:	d105      	bne.n	800524a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f001 fa5f 	bl	8006710 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 ff15 	bl	8006082 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d123      	bne.n	80052aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fe9b 	bl	8004f9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005270:	e01b      	b.n	80052aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d013      	beq.n	80052a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005284:	2b03      	cmp	r3, #3
 8005286:	d10e      	bne.n	80052a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	7afa      	ldrb	r2, [r7, #11]
 8005292:	4611      	mov	r1, r2
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	4798      	blx	r3
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	e002      	b.n	80052ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e000      	b.n	80052ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6852      	ldr	r2, [r2, #4]
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	4611      	mov	r1, r2
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f001 f9c1 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	2200      	movs	r2, #0
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f9b3 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2240      	movs	r2, #64	; 0x40
 800532a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2204      	movs	r2, #4
 800536e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800538e:	2b04      	cmp	r3, #4
 8005390:	d105      	bne.n	800539e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d10b      	bne.n	80053d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6852      	ldr	r2, [r2, #4]
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	4611      	mov	r1, r2
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
  }

  return USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3301      	adds	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005480:	8a3b      	ldrh	r3, [r7, #16]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	b21a      	sxth	r2, r3
 8005486:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800548a:	4313      	orrs	r3, r2
 800548c:	b21b      	sxth	r3, r3
 800548e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005490:	89fb      	ldrh	r3, [r7, #14]
}
 8005492:	4618      	mov	r0, r3
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d004      	beq.n	80054c4 <USBD_StdDevReq+0x24>
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d002      	beq.n	80054c4 <USBD_StdDevReq+0x24>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <USBD_StdDevReq+0x38>
 80054c2:	e050      	b.n	8005566 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
    break;
 80054d6:	e04b      	b.n	8005570 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b09      	cmp	r3, #9
 80054de:	d83c      	bhi.n	800555a <USBD_StdDevReq+0xba>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <USBD_StdDevReq+0x48>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	08005551 	.word	0x08005551
 80054f0:	0800555b 	.word	0x0800555b
 80054f4:	08005547 	.word	0x08005547
 80054f8:	0800555b 	.word	0x0800555b
 80054fc:	0800551b 	.word	0x0800551b
 8005500:	08005511 	.word	0x08005511
 8005504:	0800555b 	.word	0x0800555b
 8005508:	08005533 	.word	0x08005533
 800550c:	08005525 	.word	0x08005525
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9ce 	bl	80058b4 <USBD_GetDescriptor>
      break;
 8005518:	e024      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb33 	bl	8005b88 <USBD_SetAddress>
      break;
 8005522:	e01f      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb70 	bl	8005c0c <USBD_SetConfig>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e018      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc0d 	bl	8005d54 <USBD_GetConfig>
      break;
 800553a:	e013      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fc3c 	bl	8005dbc <USBD_GetStatus>
      break;
 8005544:	e00e      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fc6a 	bl	8005e22 <USBD_SetFeature>
      break;
 800554e:	e009      	b.n	8005564 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fc79 	bl	8005e4a <USBD_ClrFeature>
      break;
 8005558:	e004      	b.n	8005564 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fccf 	bl	8005f00 <USBD_CtlError>
      break;
 8005562:	bf00      	nop
    }
    break;
 8005564:	e004      	b.n	8005570 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fcc9 	bl	8005f00 <USBD_CtlError>
    break;
 800556e:	bf00      	nop
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005592:	2b20      	cmp	r3, #32
 8005594:	d003      	beq.n	800559e <USBD_StdItfReq+0x22>
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d001      	beq.n	800559e <USBD_StdItfReq+0x22>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d12a      	bne.n	80055f4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a4:	3b01      	subs	r3, #1
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d81d      	bhi.n	80055e6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	889b      	ldrh	r3, [r3, #4]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d813      	bhi.n	80055dc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	88db      	ldrh	r3, [r3, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <USBD_StdItfReq+0x74>
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fd41 	bl	800605c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80055da:	e009      	b.n	80055f0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fc8e 	bl	8005f00 <USBD_CtlError>
      break;
 80055e4:	e004      	b.n	80055f0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc89 	bl	8005f00 <USBD_CtlError>
      break;
 80055ee:	e000      	b.n	80055f2 <USBD_StdItfReq+0x76>
      break;
 80055f0:	bf00      	nop
    }
    break;
 80055f2:	e004      	b.n	80055fe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fc82 	bl	8005f00 <USBD_CtlError>
    break;
 80055fc:	bf00      	nop
  }

  return ret;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	889b      	ldrh	r3, [r3, #4]
 800561a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005624:	2b20      	cmp	r3, #32
 8005626:	d004      	beq.n	8005632 <USBD_StdEPReq+0x2a>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d002      	beq.n	8005632 <USBD_StdEPReq+0x2a>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <USBD_StdEPReq+0x3e>
 8005630:	e135      	b.n	800589e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]
    break;
 8005644:	e130      	b.n	80058a8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d03e      	beq.n	80056cc <USBD_StdEPReq+0xc4>
 800564e:	2b03      	cmp	r3, #3
 8005650:	d002      	beq.n	8005658 <USBD_StdEPReq+0x50>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d077      	beq.n	8005746 <USBD_StdEPReq+0x13e>
 8005656:	e11c      	b.n	8005892 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800565e:	2b02      	cmp	r3, #2
 8005660:	d002      	beq.n	8005668 <USBD_StdEPReq+0x60>
 8005662:	2b03      	cmp	r3, #3
 8005664:	d015      	beq.n	8005692 <USBD_StdEPReq+0x8a>
 8005666:	e02b      	b.n	80056c0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <USBD_StdEPReq+0x80>
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d009      	beq.n	8005688 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005674:	7bbb      	ldrb	r3, [r7, #14]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 f849 	bl	8006710 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f845 	bl	8006710 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005686:	e020      	b.n	80056ca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fc38 	bl	8005f00 <USBD_CtlError>
        break;
 8005690:	e01b      	b.n	80056ca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	885b      	ldrh	r3, [r3, #2]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10e      	bne.n	80056b8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <USBD_StdEPReq+0xb0>
 80056a0:	7bbb      	ldrb	r3, [r7, #14]
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d008      	beq.n	80056b8 <USBD_StdEPReq+0xb0>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	88db      	ldrh	r3, [r3, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 f82c 	bl	8006710 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fccf 	bl	800605c <USBD_CtlSendStatus>

        break;
 80056be:	e004      	b.n	80056ca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc1c 	bl	8005f00 <USBD_CtlError>
        break;
 80056c8:	bf00      	nop
      }
      break;
 80056ca:	e0e7      	b.n	800589c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d002      	beq.n	80056dc <USBD_StdEPReq+0xd4>
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d015      	beq.n	8005706 <USBD_StdEPReq+0xfe>
 80056da:	e02d      	b.n	8005738 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <USBD_StdEPReq+0xf4>
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d009      	beq.n	80056fc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f80f 	bl	8006710 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f80b 	bl	8006710 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80056fa:	e023      	b.n	8005744 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fbfe 	bl	8005f00 <USBD_CtlError>
        break;
 8005704:	e01e      	b.n	8005744 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	885b      	ldrh	r3, [r3, #2]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d119      	bne.n	8005742 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f816 	bl	800674e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fc9a 	bl	800605c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
        }
        break;
 8005736:	e004      	b.n	8005742 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fbe0 	bl	8005f00 <USBD_CtlError>
        break;
 8005740:	e000      	b.n	8005744 <USBD_StdEPReq+0x13c>
        break;
 8005742:	bf00      	nop
      }
      break;
 8005744:	e0aa      	b.n	800589c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574c:	2b02      	cmp	r3, #2
 800574e:	d002      	beq.n	8005756 <USBD_StdEPReq+0x14e>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d032      	beq.n	80057ba <USBD_StdEPReq+0x1b2>
 8005754:	e097      	b.n	8005886 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <USBD_StdEPReq+0x164>
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d004      	beq.n	800576c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fbcb 	bl	8005f00 <USBD_CtlError>
          break;
 800576a:	e091      	b.n	8005890 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800576c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da0b      	bge.n	800578c <USBD_StdEPReq+0x184>
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	3310      	adds	r3, #16
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4413      	add	r3, r2
 8005788:	3304      	adds	r3, #4
 800578a:	e00b      	b.n	80057a4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2202      	movs	r2, #2
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fc15 	bl	8005fe2 <USBD_CtlSendData>
        break;
 80057b8:	e06a      	b.n	8005890 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80057ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da11      	bge.n	80057e6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d117      	bne.n	800580c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb8e 	bl	8005f00 <USBD_CtlError>
            break;
 80057e4:	e054      	b.n	8005890 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	f003 020f 	and.w	r2, r3, #15
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb7b 	bl	8005f00 <USBD_CtlError>
            break;
 800580a:	e041      	b.n	8005890 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800580c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da0b      	bge.n	800582c <USBD_StdEPReq+0x224>
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	3310      	adds	r3, #16
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	e00b      	b.n	8005844 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <USBD_StdEPReq+0x24a>
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d103      	bne.n	800585a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e00e      	b.n	8005878 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 ff94 	bl	800678c <USBD_LL_IsStallEP>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e002      	b.n	8005878 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2202      	movs	r2, #2
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fbaf 	bl	8005fe2 <USBD_CtlSendData>
          break;
 8005884:	e004      	b.n	8005890 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb39 	bl	8005f00 <USBD_CtlError>
        break;
 800588e:	bf00      	nop
      }
      break;
 8005890:	e004      	b.n	800589c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb33 	bl	8005f00 <USBD_CtlError>
      break;
 800589a:	bf00      	nop
    }
    break;
 800589c:	e004      	b.n	80058a8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb2d 	bl	8005f00 <USBD_CtlError>
    break;
 80058a6:	bf00      	nop
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	885b      	ldrh	r3, [r3, #2]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	f200 8128 	bhi.w	8005b2a <USBD_GetDescriptor+0x276>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <USBD_GetDescriptor+0x2c>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058fd 	.word	0x080058fd
 80058e4:	08005915 	.word	0x08005915
 80058e8:	08005955 	.word	0x08005955
 80058ec:	08005b2b 	.word	0x08005b2b
 80058f0:	08005b2b 	.word	0x08005b2b
 80058f4:	08005acb 	.word	0x08005acb
 80058f8:	08005af7 	.word	0x08005af7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	7c12      	ldrb	r2, [r2, #16]
 8005908:	f107 0108 	add.w	r1, r7, #8
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	60f8      	str	r0, [r7, #12]
    break;
 8005912:	e112      	b.n	8005b3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7c1b      	ldrb	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f107 0208 	add.w	r2, r7, #8
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	2202      	movs	r2, #2
 8005934:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005936:	e100      	b.n	8005b3a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f107 0208 	add.w	r2, r7, #8
 8005944:	4610      	mov	r0, r2
 8005946:	4798      	blx	r3
 8005948:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
    break;
 8005952:	e0f2      	b.n	8005b3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	885b      	ldrh	r3, [r3, #2]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b05      	cmp	r3, #5
 800595c:	f200 80ac 	bhi.w	8005ab8 <USBD_GetDescriptor+0x204>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <USBD_GetDescriptor+0xb4>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005981 	.word	0x08005981
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059e9 	.word	0x080059e9
 8005974:	08005a1d 	.word	0x08005a1d
 8005978:	08005a51 	.word	0x08005a51
 800597c:	08005a85 	.word	0x08005a85
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	7c12      	ldrb	r2, [r2, #16]
 8005998:	f107 0108 	add.w	r1, r7, #8
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3
 80059a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059a2:	e091      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 faaa 	bl	8005f00 <USBD_CtlError>
        err++;
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	3301      	adds	r3, #1
 80059b0:	72fb      	strb	r3, [r7, #11]
      break;
 80059b2:	e089      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	7c12      	ldrb	r2, [r2, #16]
 80059cc:	f107 0108 	add.w	r1, r7, #8
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059d6:	e077      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa90 	bl	8005f00 <USBD_CtlError>
        err++;
 80059e0:	7afb      	ldrb	r3, [r7, #11]
 80059e2:	3301      	adds	r3, #1
 80059e4:	72fb      	strb	r3, [r7, #11]
      break;
 80059e6:	e06f      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	7c12      	ldrb	r2, [r2, #16]
 8005a00:	f107 0108 	add.w	r1, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a0a:	e05d      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa76 	bl	8005f00 <USBD_CtlError>
        err++;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	3301      	adds	r3, #1
 8005a18:	72fb      	strb	r3, [r7, #11]
      break;
 8005a1a:	e055      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	7c12      	ldrb	r2, [r2, #16]
 8005a34:	f107 0108 	add.w	r1, r7, #8
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a3e:	e043      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa5c 	bl	8005f00 <USBD_CtlError>
        err++;
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8005a4e:	e03b      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	7c12      	ldrb	r2, [r2, #16]
 8005a68:	f107 0108 	add.w	r1, r7, #8
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a72:	e029      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa42 	bl	8005f00 <USBD_CtlError>
        err++;
 8005a7c:	7afb      	ldrb	r3, [r7, #11]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	72fb      	strb	r3, [r7, #11]
      break;
 8005a82:	e021      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	7c12      	ldrb	r2, [r2, #16]
 8005a9c:	f107 0108 	add.w	r1, r7, #8
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4798      	blx	r3
 8005aa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005aa6:	e00f      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa28 	bl	8005f00 <USBD_CtlError>
        err++;
 8005ab0:	7afb      	ldrb	r3, [r7, #11]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	72fb      	strb	r3, [r7, #11]
      break;
 8005ab6:	e007      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa20 	bl	8005f00 <USBD_CtlError>
      err++;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005ac6:	bf00      	nop
    }
    break;
 8005ac8:	e037      	b.n	8005b3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7c1b      	ldrb	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	f107 0208 	add.w	r2, r7, #8
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4798      	blx	r3
 8005ae2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ae4:	e029      	b.n	8005b3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fa09 	bl	8005f00 <USBD_CtlError>
      err++;
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	3301      	adds	r3, #1
 8005af2:	72fb      	strb	r3, [r7, #11]
    break;
 8005af4:	e021      	b.n	8005b3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7c1b      	ldrb	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	f107 0208 	add.w	r2, r7, #8
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
 8005b0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	2207      	movs	r2, #7
 8005b16:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005b18:	e00f      	b.n	8005b3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9ef 	bl	8005f00 <USBD_CtlError>
      err++;
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	3301      	adds	r3, #1
 8005b26:	72fb      	strb	r3, [r7, #11]
    break;
 8005b28:	e007      	b.n	8005b3a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f9e7 	bl	8005f00 <USBD_CtlError>
    err++;
 8005b32:	7afb      	ldrb	r3, [r7, #11]
 8005b34:	3301      	adds	r3, #1
 8005b36:	72fb      	strb	r3, [r7, #11]
    break;
 8005b38:	bf00      	nop
  }

  if (err != 0U)
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11e      	bne.n	8005b7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	88db      	ldrh	r3, [r3, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d016      	beq.n	8005b76 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	88da      	ldrh	r2, [r3, #6]
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf28      	it	cs
 8005b58:	4613      	movcs	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b5e:	893b      	ldrh	r3, [r7, #8]
 8005b60:	461a      	mov	r2, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa3c 	bl	8005fe2 <USBD_CtlSendData>
 8005b6a:	e009      	b.n	8005b80 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9c6 	bl	8005f00 <USBD_CtlError>
 8005b74:	e004      	b.n	8005b80 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa70 	bl	800605c <USBD_CtlSendStatus>
 8005b7c:	e000      	b.n	8005b80 <USBD_GetDescriptor+0x2cc>
    return;
 8005b7e:	bf00      	nop
    }
  }
}
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop

08005b88 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	889b      	ldrh	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d130      	bne.n	8005bfc <USBD_SetAddress+0x74>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	88db      	ldrh	r3, [r3, #6]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12c      	bne.n	8005bfc <USBD_SetAddress+0x74>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	885b      	ldrh	r3, [r3, #2]
 8005ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba8:	d828      	bhi.n	8005bfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	885b      	ldrh	r3, [r3, #2]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d104      	bne.n	8005bca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f99c 	bl	8005f00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc8:	e01c      	b.n	8005c04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fe04 	bl	80067e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa3d 	bl	800605c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf0:	e008      	b.n	8005c04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfa:	e003      	b.n	8005c04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f97e 	bl	8005f00 <USBD_CtlError>
  }
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	885b      	ldrh	r3, [r3, #2]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	4b4b      	ldr	r3, [pc, #300]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c24:	4b4a      	ldr	r3, [pc, #296]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d905      	bls.n	8005c38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f966 	bl	8005f00 <USBD_CtlError>
    return USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e087      	b.n	8005d48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d002      	beq.n	8005c48 <USBD_SetConfig+0x3c>
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d025      	beq.n	8005c92 <USBD_SetConfig+0x86>
 8005c46:	e071      	b.n	8005d2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005c48:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01c      	beq.n	8005c8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005c50:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c5a:	4b3d      	ldr	r3, [pc, #244]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff f9a7 	bl	8004fb4 <USBD_SetClassConfig>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f944 	bl	8005f00 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c78:	e065      	b.n	8005d46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9ee 	bl	800605c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c88:	e05d      	b.n	8005d46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9e6 	bl	800605c <USBD_CtlSendStatus>
    break;
 8005c90:	e059      	b.n	8005d46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005c92:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <USBD_SetConfig+0x144>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d112      	bne.n	8005cc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <USBD_SetConfig+0x144>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cac:	4b28      	ldr	r3, [pc, #160]	; (8005d50 <USBD_SetConfig+0x144>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff f99a 	bl	8004fec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9cf 	bl	800605c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005cbe:	e042      	b.n	8005d46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <USBD_SetConfig+0x144>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d02a      	beq.n	8005d24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff f988 	bl	8004fec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <USBD_SetConfig+0x144>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <USBD_SetConfig+0x144>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff f961 	bl	8004fb4 <USBD_SetClassConfig>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8fe 	bl	8005f00 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff f96d 	bl	8004fec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005d1a:	e014      	b.n	8005d46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f99d 	bl	800605c <USBD_CtlSendStatus>
    break;
 8005d22:	e010      	b.n	8005d46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f999 	bl	800605c <USBD_CtlSendStatus>
    break;
 8005d2a:	e00c      	b.n	8005d46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8e6 	bl	8005f00 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <USBD_SetConfig+0x144>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff f956 	bl	8004fec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	73fb      	strb	r3, [r7, #15]
    break;
 8005d44:	bf00      	nop
  }

  return ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200001e8 	.word	0x200001e8

08005d54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	88db      	ldrh	r3, [r3, #6]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d004      	beq.n	8005d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8c9 	bl	8005f00 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005d6e:	e021      	b.n	8005db4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	db17      	blt.n	8005daa <USBD_GetConfig+0x56>
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	dd02      	ble.n	8005d84 <USBD_GetConfig+0x30>
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d00b      	beq.n	8005d9a <USBD_GetConfig+0x46>
 8005d82:	e012      	b.n	8005daa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	2201      	movs	r2, #1
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f925 	bl	8005fe2 <USBD_CtlSendData>
      break;
 8005d98:	e00c      	b.n	8005db4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f91d 	bl	8005fe2 <USBD_CtlSendData>
      break;
 8005da8:	e004      	b.n	8005db4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8a7 	bl	8005f00 <USBD_CtlError>
      break;
 8005db2:	bf00      	nop
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d81e      	bhi.n	8005e10 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	88db      	ldrh	r3, [r3, #6]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d004      	beq.n	8005de4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f88f 	bl	8005f00 <USBD_CtlError>
      break;
 8005de2:	e01a      	b.n	8005e1a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f043 0202 	orr.w	r2, r3, #2
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	330c      	adds	r3, #12
 8005e04:	2202      	movs	r2, #2
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8ea 	bl	8005fe2 <USBD_CtlSendData>
    break;
 8005e0e:	e004      	b.n	8005e1a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f874 	bl	8005f00 <USBD_CtlError>
    break;
 8005e18:	bf00      	nop
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d106      	bne.n	8005e42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f90d 	bl	800605c <USBD_CtlSendStatus>
  }
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d80b      	bhi.n	8005e78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	885b      	ldrh	r3, [r3, #2]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d10c      	bne.n	8005e82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f8f3 	bl	800605c <USBD_CtlSendStatus>
      }
      break;
 8005e76:	e004      	b.n	8005e82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f840 	bl	8005f00 <USBD_CtlError>
      break;
 8005e80:	e000      	b.n	8005e84 <USBD_ClrFeature+0x3a>
      break;
 8005e82:	bf00      	nop
  }
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff fad3 	bl	8005462 <SWAPBYTE>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fac6 	bl	8005462 <SWAPBYTE>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff fab9 	bl	8005462 <SWAPBYTE>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	80da      	strh	r2, [r3, #6]
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbff 	bl	8006710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f12:	2100      	movs	r1, #0
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fbfb 	bl	8006710 <USBD_LL_StallEP>
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d036      	beq.n	8005fa6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005f3c:	6938      	ldr	r0, [r7, #16]
 8005f3e:	f000 f836 	bl	8005fae <USBD_GetLen>
 8005f42:	4603      	mov	r3, r0
 8005f44:	3301      	adds	r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4413      	add	r3, r2
 8005f68:	2203      	movs	r2, #3
 8005f6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f72:	e013      	b.n	8005f9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
    idx++;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4413      	add	r3, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e7      	bne.n	8005f74 <USBD_GetString+0x52>
 8005fa4:	e000      	b.n	8005fa8 <USBD_GetString+0x86>
    return;
 8005fa6:	bf00      	nop
  }
}
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005fbe:	e005      	b.n	8005fcc <USBD_GetLen+0x1e>
  {
    len++;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f5      	bne.n	8005fc0 <USBD_GetLen+0x12>
  }

  return len;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	2100      	movs	r1, #0
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fc0a 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	2100      	movs	r1, #0
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fbf9 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	2100      	movs	r1, #0
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fc09 	bl	8006864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2204      	movs	r2, #4
 8006068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800606c:	2300      	movs	r3, #0
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fbd5 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2205      	movs	r2, #5
 800608e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006092:	2300      	movs	r3, #0
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fbe3 	bl	8006864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060ac:	2200      	movs	r2, #0
 80060ae:	490e      	ldr	r1, [pc, #56]	; (80060e8 <MX_USB_DEVICE_Init+0x40>)
 80060b0:	480e      	ldr	r0, [pc, #56]	; (80060ec <MX_USB_DEVICE_Init+0x44>)
 80060b2:	f7fe ff11 	bl	8004ed8 <USBD_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060bc:	f7fa fbce 	bl	800085c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80060c0:	490b      	ldr	r1, [pc, #44]	; (80060f0 <MX_USB_DEVICE_Init+0x48>)
 80060c2:	480a      	ldr	r0, [pc, #40]	; (80060ec <MX_USB_DEVICE_Init+0x44>)
 80060c4:	f7fe ff3e 	bl	8004f44 <USBD_RegisterClass>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060ce:	f7fa fbc5 	bl	800085c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060d2:	4806      	ldr	r0, [pc, #24]	; (80060ec <MX_USB_DEVICE_Init+0x44>)
 80060d4:	f7fe ff57 	bl	8004f86 <USBD_Start>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80060de:	f7fa fbbd 	bl	800085c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000114 	.word	0x20000114
 80060ec:	20000238 	.word	0x20000238
 80060f0:	2000000c 	.word	0x2000000c

080060f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2212      	movs	r2, #18
 8006104:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000130 	.word	0x20000130

08006118 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2204      	movs	r2, #4
 8006128:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800612a:	4b03      	ldr	r3, [pc, #12]	; (8006138 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	20000144 	.word	0x20000144

0800613c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	6039      	str	r1, [r7, #0]
 8006146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4907      	ldr	r1, [pc, #28]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
 8006152:	4808      	ldr	r0, [pc, #32]	; (8006174 <USBD_FS_ProductStrDescriptor+0x38>)
 8006154:	f7ff fee5 	bl	8005f22 <USBD_GetString>
 8006158:	e004      	b.n	8006164 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4904      	ldr	r1, [pc, #16]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
 800615e:	4805      	ldr	r0, [pc, #20]	; (8006174 <USBD_FS_ProductStrDescriptor+0x38>)
 8006160:	f7ff fedf 	bl	8005f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000508 	.word	0x20000508
 8006174:	08006b10 	.word	0x08006b10

08006178 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	4904      	ldr	r1, [pc, #16]	; (8006198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006188:	4804      	ldr	r0, [pc, #16]	; (800619c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800618a:	f7ff feca 	bl	8005f22 <USBD_GetString>
  return USBD_StrDesc;
 800618e:	4b02      	ldr	r3, [pc, #8]	; (8006198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000508 	.word	0x20000508
 800619c:	08006b28 	.word	0x08006b28

080061a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	6039      	str	r1, [r7, #0]
 80061aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	221a      	movs	r2, #26
 80061b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061b2:	f000 f843 	bl	800623c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061b6:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000148 	.word	0x20000148

080061c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	4907      	ldr	r1, [pc, #28]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061da:	4808      	ldr	r0, [pc, #32]	; (80061fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80061dc:	f7ff fea1 	bl	8005f22 <USBD_GetString>
 80061e0:	e004      	b.n	80061ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4904      	ldr	r1, [pc, #16]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80061e8:	f7ff fe9b 	bl	8005f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061ec:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000508 	.word	0x20000508
 80061fc:	08006b3c 	.word	0x08006b3c

08006200 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4907      	ldr	r1, [pc, #28]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006216:	4808      	ldr	r0, [pc, #32]	; (8006238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006218:	f7ff fe83 	bl	8005f22 <USBD_GetString>
 800621c:	e004      	b.n	8006228 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4904      	ldr	r1, [pc, #16]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006222:	4805      	ldr	r0, [pc, #20]	; (8006238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006224:	f7ff fe7d 	bl	8005f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006228:	4b02      	ldr	r3, [pc, #8]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000508 	.word	0x20000508
 8006238:	08006b48 	.word	0x08006b48

0800623c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <Get_SerialNum+0x44>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006248:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <Get_SerialNum+0x48>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <Get_SerialNum+0x4c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006262:	2208      	movs	r2, #8
 8006264:	4909      	ldr	r1, [pc, #36]	; (800628c <Get_SerialNum+0x50>)
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f814 	bl	8006294 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800626c:	2204      	movs	r2, #4
 800626e:	4908      	ldr	r1, [pc, #32]	; (8006290 <Get_SerialNum+0x54>)
 8006270:	68b8      	ldr	r0, [r7, #8]
 8006272:	f000 f80f 	bl	8006294 <IntToUnicode>
  }
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	1fff7a10 	.word	0x1fff7a10
 8006284:	1fff7a14 	.word	0x1fff7a14
 8006288:	1fff7a18 	.word	0x1fff7a18
 800628c:	2000014a 	.word	0x2000014a
 8006290:	2000015a 	.word	0x2000015a

08006294 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
 80062aa:	e027      	b.n	80062fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0f1b      	lsrs	r3, r3, #28
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d80b      	bhi.n	80062cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	0f1b      	lsrs	r3, r3, #28
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4619      	mov	r1, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	440b      	add	r3, r1
 80062c4:	3230      	adds	r2, #48	; 0x30
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e00a      	b.n	80062e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	0f1b      	lsrs	r3, r3, #28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	440b      	add	r3, r1
 80062dc:	3237      	adds	r2, #55	; 0x37
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	3301      	adds	r3, #1
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	3301      	adds	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
 80062fc:	7dfa      	ldrb	r2, [r7, #23]
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3d3      	bcc.n	80062ac <IntToUnicode+0x18>
  }
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006330:	d147      	bne.n	80063c2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	4a24      	ldr	r2, [pc, #144]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	6313      	str	r3, [r2, #48]	; 0x30
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800634e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006354:	2302      	movs	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800635c:	2303      	movs	r3, #3
 800635e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006360:	230a      	movs	r3, #10
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	4619      	mov	r1, r3
 800636a:	4819      	ldr	r0, [pc, #100]	; (80063d0 <HAL_PCD_MspInit+0xc0>)
 800636c:	f7fa fd42 	bl	8000df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800637e:	f107 0314 	add.w	r3, r7, #20
 8006382:	4619      	mov	r1, r3
 8006384:	4812      	ldr	r0, [pc, #72]	; (80063d0 <HAL_PCD_MspInit+0xc0>)
 8006386:	f7fa fd35 	bl	8000df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 8006390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006394:	6353      	str	r3, [r2, #52]	; 0x34
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 80063a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063a4:	6453      	str	r3, [r2, #68]	; 0x44
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <HAL_PCD_MspInit+0xbc>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	2043      	movs	r0, #67	; 0x43
 80063b8:	f7fa fce5 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063bc:	2043      	movs	r0, #67	; 0x43
 80063be:	f7fa fcfe 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063c2:	bf00      	nop
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40020000 	.word	0x40020000

080063d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fe16 	bl	800501c <USBD_LL_SetupStage>
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	4619      	mov	r1, r3
 8006422:	f7fe fe4e 	bl	80050c2 <USBD_LL_DataOutStage>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3348      	adds	r3, #72	; 0x48
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	4619      	mov	r1, r3
 8006456:	f7fe fe97 	bl	8005188 <USBD_LL_DataInStage>
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ff9b 	bl	80053ac <USBD_LL_SOF>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
 8006496:	e008      	b.n	80064aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d102      	bne.n	80064a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e001      	b.n	80064aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80064a6:	f7fa f9d9 	bl	800085c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe ff3e 	bl	8005336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fef7 	bl	80052b4 <USBD_LL_Reset>
}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe ff39 	bl	8005356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <HAL_PCD_SuspendCallback+0x48>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	4a03      	ldr	r2, [pc, #12]	; (8006518 <HAL_PCD_SuspendCallback+0x48>)
 800650a:	f043 0306 	orr.w	r3, r3, #6
 800650e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe ff28 	bl	8005380 <USBD_LL_Resume>
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	4611      	mov	r1, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe ff53 	bl	80053fa <USBD_LL_IsoOUTIncomplete>
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe ff34 	bl	80053e0 <USBD_LL_IsoINIncomplete>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe ff40 	bl	8005414 <USBD_LL_DevConnected>
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe ff3d 	bl	800542a <USBD_LL_DevDisconnected>
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d13c      	bne.n	8006642 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <USBD_LL_Init+0x94>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <USBD_LL_Init+0x94>)
 80065d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065d8:	4b1c      	ldr	r3, [pc, #112]	; (800664c <USBD_LL_Init+0x94>)
 80065da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <USBD_LL_Init+0x94>)
 80065e2:	2204      	movs	r2, #4
 80065e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <USBD_LL_Init+0x94>)
 80065e8:	2202      	movs	r2, #2
 80065ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <USBD_LL_Init+0x94>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <USBD_LL_Init+0x94>)
 80065f4:	2202      	movs	r2, #2
 80065f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80065f8:	4b14      	ldr	r3, [pc, #80]	; (800664c <USBD_LL_Init+0x94>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <USBD_LL_Init+0x94>)
 8006600:	2200      	movs	r2, #0
 8006602:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006604:	4b11      	ldr	r3, [pc, #68]	; (800664c <USBD_LL_Init+0x94>)
 8006606:	2200      	movs	r2, #0
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <USBD_LL_Init+0x94>)
 800660c:	2201      	movs	r2, #1
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <USBD_LL_Init+0x94>)
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006616:	480d      	ldr	r0, [pc, #52]	; (800664c <USBD_LL_Init+0x94>)
 8006618:	f7fa fdc7 	bl	80011aa <HAL_PCD_Init>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006622:	f7fa f91b 	bl	800085c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006626:	2180      	movs	r1, #128	; 0x80
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <USBD_LL_Init+0x94>)
 800662a:	f7fb ff0c 	bl	8002446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	2100      	movs	r1, #0
 8006632:	4806      	ldr	r0, [pc, #24]	; (800664c <USBD_LL_Init+0x94>)
 8006634:	f7fb fec0 	bl	80023b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	2101      	movs	r1, #1
 800663c:	4803      	ldr	r0, [pc, #12]	; (800664c <USBD_LL_Init+0x94>)
 800663e:	f7fb febb 	bl	80023b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000708 	.word	0x20000708

08006650 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fa febc 	bl	80013e4 <HAL_PCD_Start>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f918 	bl	80068a8 <USBD_Get_USB_Status>
 8006678:	4603      	mov	r3, r0
 800667a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800667c:	7bbb      	ldrb	r3, [r7, #14]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	461a      	mov	r2, r3
 8006694:	4603      	mov	r3, r0
 8006696:	70fb      	strb	r3, [r7, #3]
 8006698:	460b      	mov	r3, r1
 800669a:	70bb      	strb	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066ae:	78bb      	ldrb	r3, [r7, #2]
 80066b0:	883a      	ldrh	r2, [r7, #0]
 80066b2:	78f9      	ldrb	r1, [r7, #3]
 80066b4:	f7fb faa0 	bl	8001bf8 <HAL_PCD_EP_Open>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f8f2 	bl	80068a8 <USBD_Get_USB_Status>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fb fae9 	bl	8001cc8 <HAL_PCD_EP_Close>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f8d3 	bl	80068a8 <USBD_Get_USB_Status>
 8006702:	4603      	mov	r3, r0
 8006704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006706:	7bbb      	ldrb	r3, [r7, #14]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb fba9 	bl	8001e86 <HAL_PCD_EP_SetStall>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f8b4 	bl	80068a8 <USBD_Get_USB_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006744:	7bbb      	ldrb	r3, [r7, #14]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	4611      	mov	r1, r2
 800676c:	4618      	mov	r0, r3
 800676e:	f7fb fbee 	bl	8001f4e <HAL_PCD_EP_ClrStall>
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f895 	bl	80068a8 <USBD_Get_USB_Status>
 800677e:	4603      	mov	r3, r0
 8006780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006782:	7bbb      	ldrb	r3, [r7, #14]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800679e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0b      	bge.n	80067c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	333e      	adds	r3, #62	; 0x3e
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	e00b      	b.n	80067d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f7fb f9d3 	bl	8001bae <HAL_PCD_SetAddress>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f84a 	bl	80068a8 <USBD_Get_USB_Status>
 8006814:	4603      	mov	r3, r0
 8006816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006818:	7bbb      	ldrb	r3, [r7, #14]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	460b      	mov	r3, r1
 8006830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006840:	7af9      	ldrb	r1, [r7, #11]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	f7fb fad4 	bl	8001df2 <HAL_PCD_EP_Transmit>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f829 	bl	80068a8 <USBD_Get_USB_Status>
 8006856:	4603      	mov	r3, r0
 8006858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800685a:	7dbb      	ldrb	r3, [r7, #22]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	460b      	mov	r3, r1
 8006872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006882:	7af9      	ldrb	r1, [r7, #11]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	f7fb fa68 	bl	8001d5c <HAL_PCD_EP_Receive>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 f808 	bl	80068a8 <USBD_Get_USB_Status>
 8006898:	4603      	mov	r3, r0
 800689a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800689c:	7dbb      	ldrb	r3, [r7, #22]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d817      	bhi.n	80068ec <USBD_Get_USB_Status+0x44>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <USBD_Get_USB_Status+0x1c>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068db 	.word	0x080068db
 80068cc:	080068e1 	.word	0x080068e1
 80068d0:	080068e7 	.word	0x080068e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
    break;
 80068d8:	e00b      	b.n	80068f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
    break;
 80068de:	e008      	b.n	80068f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
    break;
 80068e4:	e005      	b.n	80068f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	73fb      	strb	r3, [r7, #15]
    break;
 80068ea:	e002      	b.n	80068f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	73fb      	strb	r3, [r7, #15]
    break;
 80068f0:	bf00      	nop
  }
  return usb_status;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <__errno>:
 8006900:	4b01      	ldr	r3, [pc, #4]	; (8006908 <__errno+0x8>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000164 	.word	0x20000164

0800690c <__libc_init_array>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4e0d      	ldr	r6, [pc, #52]	; (8006944 <__libc_init_array+0x38>)
 8006910:	4c0d      	ldr	r4, [pc, #52]	; (8006948 <__libc_init_array+0x3c>)
 8006912:	1ba4      	subs	r4, r4, r6
 8006914:	10a4      	asrs	r4, r4, #2
 8006916:	2500      	movs	r5, #0
 8006918:	42a5      	cmp	r5, r4
 800691a:	d109      	bne.n	8006930 <__libc_init_array+0x24>
 800691c:	4e0b      	ldr	r6, [pc, #44]	; (800694c <__libc_init_array+0x40>)
 800691e:	4c0c      	ldr	r4, [pc, #48]	; (8006950 <__libc_init_array+0x44>)
 8006920:	f000 f8ea 	bl	8006af8 <_init>
 8006924:	1ba4      	subs	r4, r4, r6
 8006926:	10a4      	asrs	r4, r4, #2
 8006928:	2500      	movs	r5, #0
 800692a:	42a5      	cmp	r5, r4
 800692c:	d105      	bne.n	800693a <__libc_init_array+0x2e>
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006934:	4798      	blx	r3
 8006936:	3501      	adds	r5, #1
 8006938:	e7ee      	b.n	8006918 <__libc_init_array+0xc>
 800693a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800693e:	4798      	blx	r3
 8006940:	3501      	adds	r5, #1
 8006942:	e7f2      	b.n	800692a <__libc_init_array+0x1e>
 8006944:	08006b78 	.word	0x08006b78
 8006948:	08006b78 	.word	0x08006b78
 800694c:	08006b78 	.word	0x08006b78
 8006950:	08006b7c 	.word	0x08006b7c

08006954 <malloc>:
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <malloc+0xc>)
 8006956:	4601      	mov	r1, r0
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f000 b861 	b.w	8006a20 <_malloc_r>
 800695e:	bf00      	nop
 8006960:	20000164 	.word	0x20000164

08006964 <free>:
 8006964:	4b02      	ldr	r3, [pc, #8]	; (8006970 <free+0xc>)
 8006966:	4601      	mov	r1, r0
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f000 b80b 	b.w	8006984 <_free_r>
 800696e:	bf00      	nop
 8006970:	20000164 	.word	0x20000164

08006974 <memset>:
 8006974:	4402      	add	r2, r0
 8006976:	4603      	mov	r3, r0
 8006978:	4293      	cmp	r3, r2
 800697a:	d100      	bne.n	800697e <memset+0xa>
 800697c:	4770      	bx	lr
 800697e:	f803 1b01 	strb.w	r1, [r3], #1
 8006982:	e7f9      	b.n	8006978 <memset+0x4>

08006984 <_free_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4605      	mov	r5, r0
 8006988:	2900      	cmp	r1, #0
 800698a:	d045      	beq.n	8006a18 <_free_r+0x94>
 800698c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006990:	1f0c      	subs	r4, r1, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfb8      	it	lt
 8006996:	18e4      	addlt	r4, r4, r3
 8006998:	f000 f8ac 	bl	8006af4 <__malloc_lock>
 800699c:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <_free_r+0x98>)
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	4610      	mov	r0, r2
 80069a2:	b933      	cbnz	r3, 80069b2 <_free_r+0x2e>
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	6014      	str	r4, [r2, #0]
 80069a8:	4628      	mov	r0, r5
 80069aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ae:	f000 b8a2 	b.w	8006af6 <__malloc_unlock>
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	d90c      	bls.n	80069d0 <_free_r+0x4c>
 80069b6:	6821      	ldr	r1, [r4, #0]
 80069b8:	1862      	adds	r2, r4, r1
 80069ba:	4293      	cmp	r3, r2
 80069bc:	bf04      	itt	eq
 80069be:	681a      	ldreq	r2, [r3, #0]
 80069c0:	685b      	ldreq	r3, [r3, #4]
 80069c2:	6063      	str	r3, [r4, #4]
 80069c4:	bf04      	itt	eq
 80069c6:	1852      	addeq	r2, r2, r1
 80069c8:	6022      	streq	r2, [r4, #0]
 80069ca:	6004      	str	r4, [r0, #0]
 80069cc:	e7ec      	b.n	80069a8 <_free_r+0x24>
 80069ce:	4613      	mov	r3, r2
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	b10a      	cbz	r2, 80069d8 <_free_r+0x54>
 80069d4:	42a2      	cmp	r2, r4
 80069d6:	d9fa      	bls.n	80069ce <_free_r+0x4a>
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	1858      	adds	r0, r3, r1
 80069dc:	42a0      	cmp	r0, r4
 80069de:	d10b      	bne.n	80069f8 <_free_r+0x74>
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	4401      	add	r1, r0
 80069e4:	1858      	adds	r0, r3, r1
 80069e6:	4282      	cmp	r2, r0
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	d1dd      	bne.n	80069a8 <_free_r+0x24>
 80069ec:	6810      	ldr	r0, [r2, #0]
 80069ee:	6852      	ldr	r2, [r2, #4]
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	4401      	add	r1, r0
 80069f4:	6019      	str	r1, [r3, #0]
 80069f6:	e7d7      	b.n	80069a8 <_free_r+0x24>
 80069f8:	d902      	bls.n	8006a00 <_free_r+0x7c>
 80069fa:	230c      	movs	r3, #12
 80069fc:	602b      	str	r3, [r5, #0]
 80069fe:	e7d3      	b.n	80069a8 <_free_r+0x24>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	1821      	adds	r1, r4, r0
 8006a04:	428a      	cmp	r2, r1
 8006a06:	bf04      	itt	eq
 8006a08:	6811      	ldreq	r1, [r2, #0]
 8006a0a:	6852      	ldreq	r2, [r2, #4]
 8006a0c:	6062      	str	r2, [r4, #4]
 8006a0e:	bf04      	itt	eq
 8006a10:	1809      	addeq	r1, r1, r0
 8006a12:	6021      	streq	r1, [r4, #0]
 8006a14:	605c      	str	r4, [r3, #4]
 8006a16:	e7c7      	b.n	80069a8 <_free_r+0x24>
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200001ec 	.word	0x200001ec

08006a20 <_malloc_r>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	1ccd      	adds	r5, r1, #3
 8006a24:	f025 0503 	bic.w	r5, r5, #3
 8006a28:	3508      	adds	r5, #8
 8006a2a:	2d0c      	cmp	r5, #12
 8006a2c:	bf38      	it	cc
 8006a2e:	250c      	movcc	r5, #12
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	4606      	mov	r6, r0
 8006a34:	db01      	blt.n	8006a3a <_malloc_r+0x1a>
 8006a36:	42a9      	cmp	r1, r5
 8006a38:	d903      	bls.n	8006a42 <_malloc_r+0x22>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	2000      	movs	r0, #0
 8006a40:	bd70      	pop	{r4, r5, r6, pc}
 8006a42:	f000 f857 	bl	8006af4 <__malloc_lock>
 8006a46:	4a21      	ldr	r2, [pc, #132]	; (8006acc <_malloc_r+0xac>)
 8006a48:	6814      	ldr	r4, [r2, #0]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	b991      	cbnz	r1, 8006a74 <_malloc_r+0x54>
 8006a4e:	4c20      	ldr	r4, [pc, #128]	; (8006ad0 <_malloc_r+0xb0>)
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	b91b      	cbnz	r3, 8006a5c <_malloc_r+0x3c>
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 f83d 	bl	8006ad4 <_sbrk_r>
 8006a5a:	6020      	str	r0, [r4, #0]
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 f838 	bl	8006ad4 <_sbrk_r>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d124      	bne.n	8006ab2 <_malloc_r+0x92>
 8006a68:	230c      	movs	r3, #12
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f842 	bl	8006af6 <__malloc_unlock>
 8006a72:	e7e4      	b.n	8006a3e <_malloc_r+0x1e>
 8006a74:	680b      	ldr	r3, [r1, #0]
 8006a76:	1b5b      	subs	r3, r3, r5
 8006a78:	d418      	bmi.n	8006aac <_malloc_r+0x8c>
 8006a7a:	2b0b      	cmp	r3, #11
 8006a7c:	d90f      	bls.n	8006a9e <_malloc_r+0x7e>
 8006a7e:	600b      	str	r3, [r1, #0]
 8006a80:	50cd      	str	r5, [r1, r3]
 8006a82:	18cc      	adds	r4, r1, r3
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f836 	bl	8006af6 <__malloc_unlock>
 8006a8a:	f104 000b 	add.w	r0, r4, #11
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	f020 0007 	bic.w	r0, r0, #7
 8006a94:	1ac3      	subs	r3, r0, r3
 8006a96:	d0d3      	beq.n	8006a40 <_malloc_r+0x20>
 8006a98:	425a      	negs	r2, r3
 8006a9a:	50e2      	str	r2, [r4, r3]
 8006a9c:	e7d0      	b.n	8006a40 <_malloc_r+0x20>
 8006a9e:	428c      	cmp	r4, r1
 8006aa0:	684b      	ldr	r3, [r1, #4]
 8006aa2:	bf16      	itet	ne
 8006aa4:	6063      	strne	r3, [r4, #4]
 8006aa6:	6013      	streq	r3, [r2, #0]
 8006aa8:	460c      	movne	r4, r1
 8006aaa:	e7eb      	b.n	8006a84 <_malloc_r+0x64>
 8006aac:	460c      	mov	r4, r1
 8006aae:	6849      	ldr	r1, [r1, #4]
 8006ab0:	e7cc      	b.n	8006a4c <_malloc_r+0x2c>
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d005      	beq.n	8006ac8 <_malloc_r+0xa8>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f000 f808 	bl	8006ad4 <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d0cf      	beq.n	8006a68 <_malloc_r+0x48>
 8006ac8:	6025      	str	r5, [r4, #0]
 8006aca:	e7db      	b.n	8006a84 <_malloc_r+0x64>
 8006acc:	200001ec 	.word	0x200001ec
 8006ad0:	200001f0 	.word	0x200001f0

08006ad4 <_sbrk_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4c06      	ldr	r4, [pc, #24]	; (8006af0 <_sbrk_r+0x1c>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4605      	mov	r5, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	f7f9 ff6c 	bl	80009bc <_sbrk>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_sbrk_r+0x1a>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_sbrk_r+0x1a>
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	20000b10 	.word	0x20000b10

08006af4 <__malloc_lock>:
 8006af4:	4770      	bx	lr

08006af6 <__malloc_unlock>:
 8006af6:	4770      	bx	lr

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
